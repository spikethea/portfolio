"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-three";
exports.ids = ["vendor-chunks/@react-three"];
exports.modules = {

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/index-b3e44f21.cjs.dev.js":
/*!************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/index-b3e44f21.cjs.dev.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar constants = __webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\nvar create = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/zustand/esm/index.js\");\nvar Reconciler = __webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\nvar scheduler = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\");\nvar suspendReact = __webpack_require__(/*! suspend-react */ \"(ssr)/./node_modules/suspend-react/index.cjs.js\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar THREE__namespace = /*#__PURE__*/_interopNamespace(THREE);\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nvar create__default = /*#__PURE__*/_interopDefault(create);\nvar Reconciler__default = /*#__PURE__*/_interopDefault(Reconciler);\n\nvar threeTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nconst catalogue = {};\nconst extend = objects => void Object.assign(catalogue, objects);\nfunction createRenderer(_roots, _getEventPriority) {\n  function createInstance(type, {\n    args = [],\n    attach,\n    ...props\n  }, root) {\n    let name = `${type[0].toUpperCase()}${type.slice(1)}`;\n    let instance;\n    if (type === 'primitive') {\n      if (props.object === undefined) throw new Error(\"R3F: Primitives without 'object' are invalid!\");\n      const object = props.object;\n      instance = prepare(object, {\n        type,\n        root,\n        attach,\n        primitive: true\n      });\n    } else {\n      const target = catalogue[name];\n      if (!target) {\n        throw new Error(`R3F: ${name} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);\n      }\n\n      // Throw if an object or literal was passed for args\n      if (!Array.isArray(args)) throw new Error('R3F: The args prop must be an array!');\n\n      // Instanciate new object, link it to the root\n      // Append memoized props with args so it's not forgotten\n      instance = prepare(new target(...args), {\n        type,\n        root,\n        attach,\n        // Save args in case we need to reconstruct later for HMR\n        memoizedProps: {\n          args\n        }\n      });\n    }\n\n    // Auto-attach geometries and materials\n    if (instance.__r3f.attach === undefined) {\n      if (instance instanceof THREE__namespace.BufferGeometry) instance.__r3f.attach = 'geometry';else if (instance instanceof THREE__namespace.Material) instance.__r3f.attach = 'material';\n    }\n\n    // It should NOT call onUpdate on object instanciation, because it hasn't been added to the\n    // view yet. If the callback relies on references for instance, they won't be ready yet, this is\n    // why it passes \"true\" here\n    // There is no reason to apply props to injects\n    if (name !== 'inject') applyProps$1(instance, props);\n    return instance;\n  }\n  function appendChild(parentInstance, child) {\n    let added = false;\n    if (child) {\n      var _child$__r3f, _parentInstance$__r3f;\n      // The attach attribute implies that the object attaches itself on the parent\n      if ((_child$__r3f = child.__r3f) != null && _child$__r3f.attach) {\n        attach(parentInstance, child, child.__r3f.attach);\n      } else if (child.isObject3D && parentInstance.isObject3D) {\n        // add in the usual parent-child way\n        parentInstance.add(child);\n        added = true;\n      }\n      // This is for anything that used attach, and for non-Object3Ds that don't get attached to props;\n      // that is, anything that's a child in React but not a child in the scenegraph.\n      if (!added) (_parentInstance$__r3f = parentInstance.__r3f) == null ? void 0 : _parentInstance$__r3f.objects.push(child);\n      if (!child.__r3f) prepare(child, {});\n      child.__r3f.parent = parentInstance;\n      updateInstance(child);\n      invalidateInstance(child);\n    }\n  }\n  function insertBefore(parentInstance, child, beforeChild) {\n    let added = false;\n    if (child) {\n      var _child$__r3f2, _parentInstance$__r3f2;\n      if ((_child$__r3f2 = child.__r3f) != null && _child$__r3f2.attach) {\n        attach(parentInstance, child, child.__r3f.attach);\n      } else if (child.isObject3D && parentInstance.isObject3D) {\n        child.parent = parentInstance;\n        child.dispatchEvent({\n          type: 'added'\n        });\n        const restSiblings = parentInstance.children.filter(sibling => sibling !== child);\n        const index = restSiblings.indexOf(beforeChild);\n        parentInstance.children = [...restSiblings.slice(0, index), child, ...restSiblings.slice(index)];\n        added = true;\n      }\n      if (!added) (_parentInstance$__r3f2 = parentInstance.__r3f) == null ? void 0 : _parentInstance$__r3f2.objects.push(child);\n      if (!child.__r3f) prepare(child, {});\n      child.__r3f.parent = parentInstance;\n      updateInstance(child);\n      invalidateInstance(child);\n    }\n  }\n  function removeRecursive(array, parent, dispose = false) {\n    if (array) [...array].forEach(child => removeChild(parent, child, dispose));\n  }\n  function removeChild(parentInstance, child, dispose) {\n    if (child) {\n      var _parentInstance$__r3f3, _child$__r3f3, _child$__r3f5;\n      // Clear the parent reference\n      if (child.__r3f) child.__r3f.parent = null;\n      // Remove child from the parents objects\n      if ((_parentInstance$__r3f3 = parentInstance.__r3f) != null && _parentInstance$__r3f3.objects) parentInstance.__r3f.objects = parentInstance.__r3f.objects.filter(x => x !== child);\n      // Remove attachment\n      if ((_child$__r3f3 = child.__r3f) != null && _child$__r3f3.attach) {\n        detach(parentInstance, child, child.__r3f.attach);\n      } else if (child.isObject3D && parentInstance.isObject3D) {\n        var _child$__r3f4;\n        parentInstance.remove(child);\n        // Remove interactivity\n        if ((_child$__r3f4 = child.__r3f) != null && _child$__r3f4.root) {\n          removeInteractivity(child.__r3f.root, child);\n        }\n      }\n\n      // Allow objects to bail out of recursive dispose altogether by passing dispose={null}\n      // Never dispose of primitives because their state may be kept outside of React!\n      // In order for an object to be able to dispose it has to have\n      //   - a dispose method,\n      //   - it cannot be a <primitive object={...} />\n      //   - it cannot be a THREE.Scene, because three has broken it's own api\n      //\n      // Since disposal is recursive, we can check the optional dispose arg, which will be undefined\n      // when the reconciler calls it, but then carry our own check recursively\n      const isPrimitive = (_child$__r3f5 = child.__r3f) == null ? void 0 : _child$__r3f5.primitive;\n      const shouldDispose = !isPrimitive && (dispose === undefined ? child.dispose !== null : dispose);\n\n      // Remove nested child objects. Primitives should not have objects and children that are\n      // attached to them declaratively ...\n      if (!isPrimitive) {\n        var _child$__r3f6;\n        removeRecursive((_child$__r3f6 = child.__r3f) == null ? void 0 : _child$__r3f6.objects, child, shouldDispose);\n        removeRecursive(child.children, child, shouldDispose);\n      }\n\n      // Remove references\n      delete child.__r3f;\n\n      // Dispose item whenever the reconciler feels like it\n      if (shouldDispose && child.dispose && child.type !== 'Scene') {\n        const callback = () => {\n          try {\n            child.dispose();\n          } catch (e) {\n            /* ... */\n          }\n        };\n\n        // Schedule async at runtime, flush sync in testing\n        if (typeof IS_REACT_ACT_ENVIRONMENT === 'undefined') {\n          scheduler.unstable_scheduleCallback(scheduler.unstable_IdlePriority, callback);\n        } else {\n          callback();\n        }\n      }\n      invalidateInstance(parentInstance);\n    }\n  }\n  function switchInstance(instance, type, newProps, fiber) {\n    var _instance$__r3f;\n    const parent = (_instance$__r3f = instance.__r3f) == null ? void 0 : _instance$__r3f.parent;\n    if (!parent) return;\n    const newInstance = createInstance(type, newProps, instance.__r3f.root);\n\n    // https://github.com/pmndrs/react-three-fiber/issues/1348\n    // When args change the instance has to be re-constructed, which then\n    // forces r3f to re-parent the children and non-scene objects\n    if (instance.children) {\n      for (const child of instance.children) {\n        if (child.__r3f) appendChild(newInstance, child);\n      }\n      instance.children = instance.children.filter(child => !child.__r3f);\n    }\n    instance.__r3f.objects.forEach(child => appendChild(newInstance, child));\n    instance.__r3f.objects = [];\n    if (!instance.__r3f.autoRemovedBeforeAppend) {\n      removeChild(parent, instance);\n    }\n    if (newInstance.parent) {\n      newInstance.__r3f.autoRemovedBeforeAppend = true;\n    }\n    appendChild(parent, newInstance);\n\n    // Re-bind event handlers\n    if (newInstance.raycast && newInstance.__r3f.eventCount) {\n      const rootState = newInstance.__r3f.root.getState();\n      rootState.internal.interaction.push(newInstance);\n    }\n    [fiber, fiber.alternate].forEach(fiber => {\n      if (fiber !== null) {\n        fiber.stateNode = newInstance;\n        if (fiber.ref) {\n          if (typeof fiber.ref === 'function') fiber.ref(newInstance);else fiber.ref.current = newInstance;\n        }\n      }\n    });\n  }\n\n  // Don't handle text instances, warn on undefined behavior\n  const handleTextInstance = () => console.warn('Text is not allowed in the R3F tree! This could be stray whitespace or characters.');\n  const reconciler = Reconciler__default[\"default\"]({\n    createInstance,\n    removeChild,\n    appendChild,\n    appendInitialChild: appendChild,\n    insertBefore,\n    supportsMutation: true,\n    isPrimaryRenderer: false,\n    supportsPersistence: false,\n    supportsHydration: false,\n    noTimeout: -1,\n    appendChildToContainer: (container, child) => {\n      if (!child) return;\n\n      // Don't append to unmounted container\n      const scene = container.getState().scene;\n      if (!scene.__r3f) return;\n\n      // Link current root to the default scene\n      scene.__r3f.root = container;\n      appendChild(scene, child);\n    },\n    removeChildFromContainer: (container, child) => {\n      if (!child) return;\n      removeChild(container.getState().scene, child);\n    },\n    insertInContainerBefore: (container, child, beforeChild) => {\n      if (!child || !beforeChild) return;\n\n      // Don't append to unmounted container\n      const scene = container.getState().scene;\n      if (!scene.__r3f) return;\n      insertBefore(scene, child, beforeChild);\n    },\n    getRootHostContext: () => null,\n    getChildHostContext: parentHostContext => parentHostContext,\n    finalizeInitialChildren(instance) {\n      var _instance$__r3f2;\n      const localState = (_instance$__r3f2 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f2 : {};\n      // https://github.com/facebook/react/issues/20271\n      // Returning true will trigger commitMount\n      return Boolean(localState.handlers);\n    },\n    prepareUpdate(instance, _type, oldProps, newProps) {\n      var _instance$__r3f3;\n      const localState = (_instance$__r3f3 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f3 : {};\n\n      // Create diff-sets\n      if (localState.primitive && newProps.object && newProps.object !== instance) {\n        return [true];\n      } else {\n        // This is a data object, let's extract critical information about it\n        const {\n          args: argsNew = [],\n          children: cN,\n          ...restNew\n        } = newProps;\n        const {\n          args: argsOld = [],\n          children: cO,\n          ...restOld\n        } = oldProps;\n\n        // Throw if an object or literal was passed for args\n        if (!Array.isArray(argsNew)) throw new Error('R3F: the args prop must be an array!');\n\n        // If it has new props or arguments, then it needs to be re-instantiated\n        if (argsNew.some((value, index) => value !== argsOld[index])) return [true];\n        // Create a diff-set, flag if there are any changes\n        const diff = diffProps(instance, restNew, restOld, true);\n        if (diff.changes.length) return [false, diff];\n\n        // Otherwise do not touch the instance\n        return null;\n      }\n    },\n    commitUpdate(instance, [reconstruct, diff], type, _oldProps, newProps, fiber) {\n      // Reconstruct when args or <primitive object={...} have changes\n      if (reconstruct) switchInstance(instance, type, newProps, fiber);\n      // Otherwise just overwrite props\n      else applyProps$1(instance, diff);\n    },\n    commitMount(instance, _type, _props, _int) {\n      var _instance$__r3f4;\n      // https://github.com/facebook/react/issues/20271\n      // This will make sure events are only added once to the central container\n      const localState = (_instance$__r3f4 = instance.__r3f) != null ? _instance$__r3f4 : {};\n      if (instance.raycast && localState.handlers && localState.eventCount) {\n        instance.__r3f.root.getState().internal.interaction.push(instance);\n      }\n    },\n    getPublicInstance: instance => instance,\n    prepareForCommit: () => null,\n    preparePortalMount: container => prepare(container.getState().scene),\n    resetAfterCommit: () => {},\n    shouldSetTextContent: () => false,\n    clearContainer: () => false,\n    hideInstance(instance) {\n      var _instance$__r3f5;\n      // Detach while the instance is hidden\n      const {\n        attach: type,\n        parent\n      } = (_instance$__r3f5 = instance.__r3f) != null ? _instance$__r3f5 : {};\n      if (type && parent) detach(parent, instance, type);\n      if (instance.isObject3D) instance.visible = false;\n      invalidateInstance(instance);\n    },\n    unhideInstance(instance, props) {\n      var _instance$__r3f6;\n      // Re-attach when the instance is unhidden\n      const {\n        attach: type,\n        parent\n      } = (_instance$__r3f6 = instance.__r3f) != null ? _instance$__r3f6 : {};\n      if (type && parent) attach(parent, instance, type);\n      if (instance.isObject3D && props.visible == null || props.visible) instance.visible = true;\n      invalidateInstance(instance);\n    },\n    createTextInstance: handleTextInstance,\n    hideTextInstance: handleTextInstance,\n    unhideTextInstance: handleTextInstance,\n    // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r916356874\n    // @ts-ignore\n    getCurrentEventPriority: () => _getEventPriority ? _getEventPriority() : constants.DefaultEventPriority,\n    beforeActiveInstanceBlur: () => {},\n    afterActiveInstanceBlur: () => {},\n    detachDeletedInstance: () => {},\n    now: typeof performance !== 'undefined' && is.fun(performance.now) ? performance.now : is.fun(Date.now) ? Date.now : () => 0,\n    // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r920883503\n    scheduleTimeout: is.fun(setTimeout) ? setTimeout : undefined,\n    cancelTimeout: is.fun(clearTimeout) ? clearTimeout : undefined\n  });\n  return {\n    reconciler,\n    applyProps: applyProps$1\n  };\n}\n\nvar _window$document, _window$navigator;\n/**\r\n * Returns `true` with correct TS type inference if an object has a configurable color space (since r152).\r\n */\nconst hasColorSpace = object => 'colorSpace' in object || 'outputColorSpace' in object;\n/**\r\n * The current THREE.ColorManagement instance, if present.\r\n */\nconst getColorManagement = () => {\n  var _ColorManagement;\n  return (_ColorManagement = catalogue.ColorManagement) != null ? _ColorManagement : null;\n};\nconst isOrthographicCamera = def => def && def.isOrthographicCamera;\nconst isRef = obj => obj && obj.hasOwnProperty('current');\n\n/**\r\n * An SSR-friendly useLayoutEffect.\r\n *\r\n * React currently throws a warning when using useLayoutEffect on the server.\r\n * To get around it, we can conditionally useEffect on the server (no-op) and\r\n * useLayoutEffect elsewhere.\r\n *\r\n * @see https://github.com/facebook/react/issues/14927\r\n */\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' && ((_window$document = window.document) != null && _window$document.createElement || ((_window$navigator = window.navigator) == null ? void 0 : _window$navigator.product) === 'ReactNative') ? React__namespace.useLayoutEffect : React__namespace.useEffect;\nfunction useMutableCallback(fn) {\n  const ref = React__namespace.useRef(fn);\n  useIsomorphicLayoutEffect(() => void (ref.current = fn), [fn]);\n  return ref;\n}\nfunction Block({\n  set\n}) {\n  useIsomorphicLayoutEffect(() => {\n    set(new Promise(() => null));\n    return () => set(false);\n  }, [set]);\n  return null;\n}\nclass ErrorBoundary extends React__namespace.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: false\n    };\n  }\n  componentDidCatch(err) {\n    this.props.set(err);\n  }\n  render() {\n    return this.state.error ? null : this.props.children;\n  }\n}\nErrorBoundary.getDerivedStateFromError = () => ({\n  error: true\n});\nconst DEFAULT = '__default';\nconst DEFAULTS = new Map();\nconst isDiffSet = def => def && !!def.memoized && !!def.changes;\nfunction calculateDpr(dpr) {\n  var _window$devicePixelRa;\n  // Err on the side of progress by assuming 2x dpr if we can't detect it\n  // This will happen in workers where window is defined but dpr isn't.\n  const target = typeof window !== 'undefined' ? (_window$devicePixelRa = window.devicePixelRatio) != null ? _window$devicePixelRa : 2 : 1;\n  return Array.isArray(dpr) ? Math.min(Math.max(dpr[0], target), dpr[1]) : dpr;\n}\n\n/**\r\n * Returns instance root state\r\n */\nconst getRootState = obj => {\n  var _r3f;\n  return (_r3f = obj.__r3f) == null ? void 0 : _r3f.root.getState();\n};\n// A collection of compare functions\nconst is = {\n  obj: a => a === Object(a) && !is.arr(a) && typeof a !== 'function',\n  fun: a => typeof a === 'function',\n  str: a => typeof a === 'string',\n  num: a => typeof a === 'number',\n  boo: a => typeof a === 'boolean',\n  und: a => a === void 0,\n  arr: a => Array.isArray(a),\n  equ(a, b, {\n    arrays = 'shallow',\n    objects = 'reference',\n    strict = true\n  } = {}) {\n    // Wrong type or one of the two undefined, doesn't match\n    if (typeof a !== typeof b || !!a !== !!b) return false;\n    // Atomic, just compare a against b\n    if (is.str(a) || is.num(a)) return a === b;\n    const isObj = is.obj(a);\n    if (isObj && objects === 'reference') return a === b;\n    const isArr = is.arr(a);\n    if (isArr && arrays === 'reference') return a === b;\n    // Array or Object, shallow compare first to see if it's a match\n    if ((isArr || isObj) && a === b) return true;\n    // Last resort, go through keys\n    let i;\n    // Check if a has all the keys of b\n    for (i in a) if (!(i in b)) return false;\n    // Check if values between keys match\n    if (isObj && arrays === 'shallow' && objects === 'shallow') {\n      for (i in strict ? b : a) if (!is.equ(a[i], b[i], {\n        strict,\n        objects: 'reference'\n      })) return false;\n    } else {\n      for (i in strict ? b : a) if (a[i] !== b[i]) return false;\n    }\n    // If i is undefined\n    if (is.und(i)) {\n      // If both arrays are empty we consider them equal\n      if (isArr && a.length === 0 && b.length === 0) return true;\n      // If both objects are empty we consider them equal\n      if (isObj && Object.keys(a).length === 0 && Object.keys(b).length === 0) return true;\n      // Otherwise match them by value\n      if (a !== b) return false;\n    }\n    return true;\n  }\n};\n\n/**\r\n * Collects nodes and materials from a THREE.Object3D.\r\n */\nfunction buildGraph(object) {\n  const data = {\n    nodes: {},\n    materials: {}\n  };\n  if (object) {\n    object.traverse(obj => {\n      if (obj.name) data.nodes[obj.name] = obj;\n      if (obj.material && !data.materials[obj.material.name]) data.materials[obj.material.name] = obj.material;\n    });\n  }\n  return data;\n}\n\n// Disposes an object and all its properties\nfunction dispose(obj) {\n  if (obj.dispose && obj.type !== 'Scene') obj.dispose();\n  for (const p in obj) {\n    p.dispose == null ? void 0 : p.dispose();\n    delete obj[p];\n  }\n}\n\n// Each object in the scene carries a small LocalState descriptor\nfunction prepare(object, state) {\n  const instance = object;\n  instance.__r3f = {\n    type: '',\n    root: null,\n    previousAttach: null,\n    memoizedProps: {},\n    eventCount: 0,\n    handlers: {},\n    objects: [],\n    parent: null,\n    ...state\n  };\n  return object;\n}\nfunction resolve(instance, key) {\n  let target = instance;\n  if (key.includes('-')) {\n    const entries = key.split('-');\n    const last = entries.pop();\n    target = entries.reduce((acc, key) => acc[key], instance);\n    return {\n      target,\n      key: last\n    };\n  } else return {\n    target,\n    key\n  };\n}\n\n// Checks if a dash-cased string ends with an integer\nconst INDEX_REGEX = /-\\d+$/;\nfunction attach(parent, child, type) {\n  if (is.str(type)) {\n    // If attaching into an array (foo-0), create one\n    if (INDEX_REGEX.test(type)) {\n      const root = type.replace(INDEX_REGEX, '');\n      const {\n        target,\n        key\n      } = resolve(parent, root);\n      if (!Array.isArray(target[key])) target[key] = [];\n    }\n    const {\n      target,\n      key\n    } = resolve(parent, type);\n    child.__r3f.previousAttach = target[key];\n    target[key] = child;\n  } else child.__r3f.previousAttach = type(parent, child);\n}\nfunction detach(parent, child, type) {\n  var _child$__r3f, _child$__r3f2;\n  if (is.str(type)) {\n    const {\n      target,\n      key\n    } = resolve(parent, type);\n    const previous = child.__r3f.previousAttach;\n    // When the previous value was undefined, it means the value was never set to begin with\n    if (previous === undefined) delete target[key];\n    // Otherwise set the previous value\n    else target[key] = previous;\n  } else (_child$__r3f = child.__r3f) == null ? void 0 : _child$__r3f.previousAttach == null ? void 0 : _child$__r3f.previousAttach(parent, child);\n  (_child$__r3f2 = child.__r3f) == null ? true : delete _child$__r3f2.previousAttach;\n}\n\n// This function prepares a set of changes to be applied to the instance\nfunction diffProps(instance, {\n  children: cN,\n  key: kN,\n  ref: rN,\n  ...props\n}, {\n  children: cP,\n  key: kP,\n  ref: rP,\n  ...previous\n} = {}, remove = false) {\n  var _instance$__r3f;\n  const localState = (_instance$__r3f = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f : {};\n  const entries = Object.entries(props);\n  const changes = [];\n\n  // Catch removed props, prepend them so they can be reset or removed\n  if (remove) {\n    const previousKeys = Object.keys(previous);\n    for (let i = 0; i < previousKeys.length; i++) {\n      if (!props.hasOwnProperty(previousKeys[i])) entries.unshift([previousKeys[i], DEFAULT + 'remove']);\n    }\n  }\n  entries.forEach(([key, value]) => {\n    var _instance$__r3f2;\n    // Bail out on primitive object\n    if ((_instance$__r3f2 = instance.__r3f) != null && _instance$__r3f2.primitive && key === 'object') return;\n    // When props match bail out\n    if (is.equ(value, previous[key])) return;\n    // Collect handlers and bail out\n    if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(key)) return changes.push([key, value, true, []]);\n    // Split dashed props\n    let entries = [];\n    if (key.includes('-')) entries = key.split('-');\n    changes.push([key, value, false, entries]);\n\n    // Reset pierced props\n    for (const prop in props) {\n      const value = props[prop];\n      if (prop.startsWith(`${key}-`)) changes.push([prop, value, false, prop.split('-')]);\n    }\n  });\n  const memoized = {\n    ...props\n  };\n  if (localState.memoizedProps && localState.memoizedProps.args) memoized.args = localState.memoizedProps.args;\n  if (localState.memoizedProps && localState.memoizedProps.attach) memoized.attach = localState.memoizedProps.attach;\n  return {\n    memoized,\n    changes\n  };\n}\nconst __DEV__ = typeof process !== 'undefined' && \"development\" !== 'production';\n\n// This function applies a set of changes to the instance\nfunction applyProps$1(instance, data) {\n  var _instance$__r3f3, _root$getState, _instance$__r3f4;\n  // Filter equals, events and reserved props\n  const localState = (_instance$__r3f3 = instance.__r3f) != null ? _instance$__r3f3 : {};\n  const root = localState.root;\n  const rootState = (_root$getState = root == null ? void 0 : root.getState == null ? void 0 : root.getState()) != null ? _root$getState : {};\n  const {\n    memoized,\n    changes\n  } = isDiffSet(data) ? data : diffProps(instance, data);\n  const prevHandlers = localState.eventCount;\n\n  // Prepare memoized props\n  if (instance.__r3f) instance.__r3f.memoizedProps = memoized;\n  for (let i = 0; i < changes.length; i++) {\n    let [key, value, isEvent, keys] = changes[i];\n\n    // Alias (output)encoding => (output)colorSpace (since r152)\n    // https://github.com/pmndrs/react-three-fiber/pull/2829\n    if (hasColorSpace(instance)) {\n      const sRGBEncoding = 3001;\n      const SRGBColorSpace = 'srgb';\n      const LinearSRGBColorSpace = 'srgb-linear';\n      if (key === 'encoding') {\n        key = 'colorSpace';\n        value = value === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n      } else if (key === 'outputEncoding') {\n        key = 'outputColorSpace';\n        value = value === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n      }\n    }\n    let currentInstance = instance;\n    let targetProp = currentInstance[key];\n\n    // Revolve dashed props\n    if (keys.length) {\n      targetProp = keys.reduce((acc, key) => acc[key], instance);\n      // If the target is atomic, it forces us to switch the root\n      if (!(targetProp && targetProp.set)) {\n        const [name, ...reverseEntries] = keys.reverse();\n        currentInstance = reverseEntries.reverse().reduce((acc, key) => acc[key], instance);\n        key = name;\n      }\n    }\n\n    // https://github.com/mrdoob/three.js/issues/21209\n    // HMR/fast-refresh relies on the ability to cancel out props, but threejs\n    // has no means to do this. Hence we curate a small collection of value-classes\n    // with their respective constructor/set arguments\n    // For removed props, try to set default values, if possible\n    if (value === DEFAULT + 'remove') {\n      if (currentInstance.constructor) {\n        // create a blank slate of the instance and copy the particular parameter.\n        let ctor = DEFAULTS.get(currentInstance.constructor);\n        if (!ctor) {\n          // @ts-ignore\n          ctor = new currentInstance.constructor();\n          DEFAULTS.set(currentInstance.constructor, ctor);\n        }\n        value = ctor[key];\n      } else {\n        // instance does not have constructor, just set it to 0\n        value = 0;\n      }\n    }\n\n    // Deal with pointer events ...\n    if (isEvent) {\n      if (value) localState.handlers[key] = value;else delete localState.handlers[key];\n      localState.eventCount = Object.keys(localState.handlers).length;\n    }\n    // Special treatment for objects with support for set/copy, and layers\n    else if (targetProp && targetProp.set && (targetProp.copy || targetProp instanceof THREE__namespace.Layers)) {\n      // If value is an array\n      if (Array.isArray(value)) {\n        if (targetProp.fromArray) targetProp.fromArray(value);else targetProp.set(...value);\n      }\n      // Test again target.copy(class) next ...\n      else if (targetProp.copy && value && value.constructor && (\n      // Some environments may break strict identity checks by duplicating versions of three.js.\n      // Loosen to unminified names, ignoring descendents.\n      // https://github.com/pmndrs/react-three-fiber/issues/2856\n      // TODO: fix upstream and remove in v9\n      __DEV__ ? targetProp.constructor.name === value.constructor.name : targetProp.constructor === value.constructor)) {\n        targetProp.copy(value);\n      }\n      // If nothing else fits, just set the single value, ignore undefined\n      // https://github.com/pmndrs/react-three-fiber/issues/274\n      else if (value !== undefined) {\n        const isColor = targetProp instanceof THREE__namespace.Color;\n        // Allow setting array scalars\n        if (!isColor && targetProp.setScalar) targetProp.setScalar(value);\n        // Layers have no copy function, we must therefore copy the mask property\n        else if (targetProp instanceof THREE__namespace.Layers && value instanceof THREE__namespace.Layers) targetProp.mask = value.mask;\n        // Otherwise just set ...\n        else targetProp.set(value);\n        // For versions of three which don't support THREE.ColorManagement,\n        // Auto-convert sRGB colors\n        // https://github.com/pmndrs/react-three-fiber/issues/344\n        if (!getColorManagement() && !rootState.linear && isColor) targetProp.convertSRGBToLinear();\n      }\n      // Else, just overwrite the value\n    } else {\n      currentInstance[key] = value;\n\n      // Auto-convert sRGB textures, for now ...\n      // https://github.com/pmndrs/react-three-fiber/issues/344\n      if (currentInstance[key] instanceof THREE__namespace.Texture &&\n      // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129\n      currentInstance[key].format === THREE__namespace.RGBAFormat && currentInstance[key].type === THREE__namespace.UnsignedByteType) {\n        const texture = currentInstance[key];\n        if (hasColorSpace(texture) && hasColorSpace(rootState.gl)) texture.colorSpace = rootState.gl.outputColorSpace;else texture.encoding = rootState.gl.outputEncoding;\n      }\n    }\n    invalidateInstance(instance);\n  }\n  if (localState.parent && rootState.internal && instance.raycast && prevHandlers !== localState.eventCount) {\n    // Pre-emptively remove the instance from the interaction manager\n    const index = rootState.internal.interaction.indexOf(instance);\n    if (index > -1) rootState.internal.interaction.splice(index, 1);\n    // Add the instance to the interaction manager only when it has handlers\n    if (localState.eventCount) rootState.internal.interaction.push(instance);\n  }\n\n  // Call the update lifecycle when it is being updated, but only when it is part of the scene.\n  // Skip updates to the `onUpdate` prop itself\n  const isCircular = changes.length === 1 && changes[0][0] === 'onUpdate';\n  if (!isCircular && changes.length && (_instance$__r3f4 = instance.__r3f) != null && _instance$__r3f4.parent) updateInstance(instance);\n  return instance;\n}\nfunction invalidateInstance(instance) {\n  var _instance$__r3f5, _instance$__r3f5$root;\n  const state = (_instance$__r3f5 = instance.__r3f) == null ? void 0 : (_instance$__r3f5$root = _instance$__r3f5.root) == null ? void 0 : _instance$__r3f5$root.getState == null ? void 0 : _instance$__r3f5$root.getState();\n  if (state && state.internal.frames === 0) state.invalidate();\n}\nfunction updateInstance(instance) {\n  instance.onUpdate == null ? void 0 : instance.onUpdate(instance);\n}\nfunction updateCamera(camera, size) {\n  // https://github.com/pmndrs/react-three-fiber/issues/92\n  // Do not mess with the camera if it belongs to the user\n  if (!camera.manual) {\n    if (isOrthographicCamera(camera)) {\n      camera.left = size.width / -2;\n      camera.right = size.width / 2;\n      camera.top = size.height / 2;\n      camera.bottom = size.height / -2;\n    } else {\n      camera.aspect = size.width / size.height;\n    }\n    camera.updateProjectionMatrix();\n    // https://github.com/pmndrs/react-three-fiber/issues/178\n    // Update matrix world since the renderer is a frame late\n    camera.updateMatrixWorld();\n  }\n}\n\nfunction makeId(event) {\n  return (event.eventObject || event.object).uuid + '/' + event.index + event.instanceId;\n}\n\n// https://github.com/facebook/react/tree/main/packages/react-reconciler#getcurrenteventpriority\n// Gives React a clue as to how import the current interaction is\nfunction getEventPriority() {\n  var _globalScope$event;\n  // Get a handle to the current global scope in window and worker contexts if able\n  // https://github.com/pmndrs/react-three-fiber/pull/2493\n  const globalScope = typeof self !== 'undefined' && self || typeof window !== 'undefined' && window;\n  if (!globalScope) return constants.DefaultEventPriority;\n  const name = (_globalScope$event = globalScope.event) == null ? void 0 : _globalScope$event.type;\n  switch (name) {\n    case 'click':\n    case 'contextmenu':\n    case 'dblclick':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointerup':\n      return constants.DiscreteEventPriority;\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerenter':\n    case 'pointerleave':\n    case 'wheel':\n      return constants.ContinuousEventPriority;\n    default:\n      return constants.DefaultEventPriority;\n  }\n}\n\n/**\r\n * Release pointer captures.\r\n * This is called by releasePointerCapture in the API, and when an object is removed.\r\n */\nfunction releaseInternalPointerCapture(capturedMap, obj, captures, pointerId) {\n  const captureData = captures.get(obj);\n  if (captureData) {\n    captures.delete(obj);\n    // If this was the last capturing object for this pointer\n    if (captures.size === 0) {\n      capturedMap.delete(pointerId);\n      captureData.target.releasePointerCapture(pointerId);\n    }\n  }\n}\nfunction removeInteractivity(store, object) {\n  const {\n    internal\n  } = store.getState();\n  // Removes every trace of an object from the data store\n  internal.interaction = internal.interaction.filter(o => o !== object);\n  internal.initialHits = internal.initialHits.filter(o => o !== object);\n  internal.hovered.forEach((value, key) => {\n    if (value.eventObject === object || value.object === object) {\n      // Clear out intersects, they are outdated by now\n      internal.hovered.delete(key);\n    }\n  });\n  internal.capturedMap.forEach((captures, pointerId) => {\n    releaseInternalPointerCapture(internal.capturedMap, object, captures, pointerId);\n  });\n}\nfunction createEvents(store) {\n  /** Calculates delta */\n  function calculateDistance(event) {\n    const {\n      internal\n    } = store.getState();\n    const dx = event.offsetX - internal.initialClick[0];\n    const dy = event.offsetY - internal.initialClick[1];\n    return Math.round(Math.sqrt(dx * dx + dy * dy));\n  }\n\n  /** Returns true if an instance has a valid pointer-event registered, this excludes scroll, clicks etc */\n  function filterPointerEvents(objects) {\n    return objects.filter(obj => ['Move', 'Over', 'Enter', 'Out', 'Leave'].some(name => {\n      var _r3f;\n      return (_r3f = obj.__r3f) == null ? void 0 : _r3f.handlers['onPointer' + name];\n    }));\n  }\n  function intersect(event, filter) {\n    const state = store.getState();\n    const duplicates = new Set();\n    const intersections = [];\n    // Allow callers to eliminate event objects\n    const eventsObjects = filter ? filter(state.internal.interaction) : state.internal.interaction;\n    // Reset all raycaster cameras to undefined\n    for (let i = 0; i < eventsObjects.length; i++) {\n      const state = getRootState(eventsObjects[i]);\n      if (state) {\n        state.raycaster.camera = undefined;\n      }\n    }\n    if (!state.previousRoot) {\n      // Make sure root-level pointer and ray are set up\n      state.events.compute == null ? void 0 : state.events.compute(event, state);\n    }\n    function handleRaycast(obj) {\n      const state = getRootState(obj);\n      // Skip event handling when noEvents is set, or when the raycasters camera is null\n      if (!state || !state.events.enabled || state.raycaster.camera === null) return [];\n\n      // When the camera is undefined we have to call the event layers update function\n      if (state.raycaster.camera === undefined) {\n        var _state$previousRoot;\n        state.events.compute == null ? void 0 : state.events.compute(event, state, (_state$previousRoot = state.previousRoot) == null ? void 0 : _state$previousRoot.getState());\n        // If the camera is still undefined we have to skip this layer entirely\n        if (state.raycaster.camera === undefined) state.raycaster.camera = null;\n      }\n\n      // Intersect object by object\n      return state.raycaster.camera ? state.raycaster.intersectObject(obj, true) : [];\n    }\n\n    // Collect events\n    let hits = eventsObjects\n    // Intersect objects\n    .flatMap(handleRaycast)\n    // Sort by event priority and distance\n    .sort((a, b) => {\n      const aState = getRootState(a.object);\n      const bState = getRootState(b.object);\n      if (!aState || !bState) return a.distance - b.distance;\n      return bState.events.priority - aState.events.priority || a.distance - b.distance;\n    })\n    // Filter out duplicates\n    .filter(item => {\n      const id = makeId(item);\n      if (duplicates.has(id)) return false;\n      duplicates.add(id);\n      return true;\n    });\n\n    // https://github.com/mrdoob/three.js/issues/16031\n    // Allow custom userland intersect sort order, this likely only makes sense on the root filter\n    if (state.events.filter) hits = state.events.filter(hits, state);\n\n    // Bubble up the events, find the event source (eventObject)\n    for (const hit of hits) {\n      let eventObject = hit.object;\n      // Bubble event up\n      while (eventObject) {\n        var _r3f2;\n        if ((_r3f2 = eventObject.__r3f) != null && _r3f2.eventCount) intersections.push({\n          ...hit,\n          eventObject\n        });\n        eventObject = eventObject.parent;\n      }\n    }\n\n    // If the interaction is captured, make all capturing targets part of the intersect.\n    if ('pointerId' in event && state.internal.capturedMap.has(event.pointerId)) {\n      for (let captureData of state.internal.capturedMap.get(event.pointerId).values()) {\n        if (!duplicates.has(makeId(captureData.intersection))) intersections.push(captureData.intersection);\n      }\n    }\n    return intersections;\n  }\n\n  /**  Handles intersections by forwarding them to handlers */\n  function handleIntersects(intersections, event, delta, callback) {\n    const rootState = store.getState();\n\n    // If anything has been found, forward it to the event listeners\n    if (intersections.length) {\n      const localState = {\n        stopped: false\n      };\n      for (const hit of intersections) {\n        const state = getRootState(hit.object) || rootState;\n        const {\n          raycaster,\n          pointer,\n          camera,\n          internal\n        } = state;\n        const unprojectedPoint = new THREE__namespace.Vector3(pointer.x, pointer.y, 0).unproject(camera);\n        const hasPointerCapture = id => {\n          var _internal$capturedMap, _internal$capturedMap2;\n          return (_internal$capturedMap = (_internal$capturedMap2 = internal.capturedMap.get(id)) == null ? void 0 : _internal$capturedMap2.has(hit.eventObject)) != null ? _internal$capturedMap : false;\n        };\n        const setPointerCapture = id => {\n          const captureData = {\n            intersection: hit,\n            target: event.target\n          };\n          if (internal.capturedMap.has(id)) {\n            // if the pointerId was previously captured, we add the hit to the\n            // event capturedMap.\n            internal.capturedMap.get(id).set(hit.eventObject, captureData);\n          } else {\n            // if the pointerId was not previously captured, we create a map\n            // containing the hitObject, and the hit. hitObject is used for\n            // faster access.\n            internal.capturedMap.set(id, new Map([[hit.eventObject, captureData]]));\n          }\n          event.target.setPointerCapture(id);\n        };\n        const releasePointerCapture = id => {\n          const captures = internal.capturedMap.get(id);\n          if (captures) {\n            releaseInternalPointerCapture(internal.capturedMap, hit.eventObject, captures, id);\n          }\n        };\n\n        // Add native event props\n        let extractEventProps = {};\n        // This iterates over the event's properties including the inherited ones. Native PointerEvents have most of their props as getters which are inherited, but polyfilled PointerEvents have them all as their own properties (i.e. not inherited). We can't use Object.keys() or Object.entries() as they only return \"own\" properties; nor Object.getPrototypeOf(event) as that *doesn't* return \"own\" properties, only inherited ones.\n        for (let prop in event) {\n          let property = event[prop];\n          // Only copy over atomics, leave functions alone as these should be\n          // called as event.nativeEvent.fn()\n          if (typeof property !== 'function') extractEventProps[prop] = property;\n        }\n        let raycastEvent = {\n          ...hit,\n          ...extractEventProps,\n          pointer,\n          intersections,\n          stopped: localState.stopped,\n          delta,\n          unprojectedPoint,\n          ray: raycaster.ray,\n          camera: camera,\n          // Hijack stopPropagation, which just sets a flag\n          stopPropagation() {\n            // https://github.com/pmndrs/react-three-fiber/issues/596\n            // Events are not allowed to stop propagation if the pointer has been captured\n            const capturesForPointer = 'pointerId' in event && internal.capturedMap.get(event.pointerId);\n\n            // We only authorize stopPropagation...\n            if (\n            // ...if this pointer hasn't been captured\n            !capturesForPointer ||\n            // ... or if the hit object is capturing the pointer\n            capturesForPointer.has(hit.eventObject)) {\n              raycastEvent.stopped = localState.stopped = true;\n              // Propagation is stopped, remove all other hover records\n              // An event handler is only allowed to flush other handlers if it is hovered itself\n              if (internal.hovered.size && Array.from(internal.hovered.values()).find(i => i.eventObject === hit.eventObject)) {\n                // Objects cannot flush out higher up objects that have already caught the event\n                const higher = intersections.slice(0, intersections.indexOf(hit));\n                cancelPointer([...higher, hit]);\n              }\n            }\n          },\n          // there should be a distinction between target and currentTarget\n          target: {\n            hasPointerCapture,\n            setPointerCapture,\n            releasePointerCapture\n          },\n          currentTarget: {\n            hasPointerCapture,\n            setPointerCapture,\n            releasePointerCapture\n          },\n          nativeEvent: event\n        };\n\n        // Call subscribers\n        callback(raycastEvent);\n        // Event bubbling may be interrupted by stopPropagation\n        if (localState.stopped === true) break;\n      }\n    }\n    return intersections;\n  }\n  function cancelPointer(intersections) {\n    const {\n      internal\n    } = store.getState();\n    for (const hoveredObj of internal.hovered.values()) {\n      // When no objects were hit or the the hovered object wasn't found underneath the cursor\n      // we call onPointerOut and delete the object from the hovered-elements map\n      if (!intersections.length || !intersections.find(hit => hit.object === hoveredObj.object && hit.index === hoveredObj.index && hit.instanceId === hoveredObj.instanceId)) {\n        const eventObject = hoveredObj.eventObject;\n        const instance = eventObject.__r3f;\n        const handlers = instance == null ? void 0 : instance.handlers;\n        internal.hovered.delete(makeId(hoveredObj));\n        if (instance != null && instance.eventCount) {\n          // Clear out intersects, they are outdated by now\n          const data = {\n            ...hoveredObj,\n            intersections\n          };\n          handlers.onPointerOut == null ? void 0 : handlers.onPointerOut(data);\n          handlers.onPointerLeave == null ? void 0 : handlers.onPointerLeave(data);\n        }\n      }\n    }\n  }\n  function pointerMissed(event, objects) {\n    for (let i = 0; i < objects.length; i++) {\n      const instance = objects[i].__r3f;\n      instance == null ? void 0 : instance.handlers.onPointerMissed == null ? void 0 : instance.handlers.onPointerMissed(event);\n    }\n  }\n  function handlePointer(name) {\n    // Deal with cancelation\n    switch (name) {\n      case 'onPointerLeave':\n      case 'onPointerCancel':\n        return () => cancelPointer([]);\n      case 'onLostPointerCapture':\n        return event => {\n          const {\n            internal\n          } = store.getState();\n          if ('pointerId' in event && internal.capturedMap.has(event.pointerId)) {\n            // If the object event interface had onLostPointerCapture, we'd call it here on every\n            // object that's getting removed. We call it on the next frame because onLostPointerCapture\n            // fires before onPointerUp. Otherwise pointerUp would never be called if the event didn't\n            // happen in the object it originated from, leaving components in a in-between state.\n            requestAnimationFrame(() => {\n              // Only release if pointer-up didn't do it already\n              if (internal.capturedMap.has(event.pointerId)) {\n                internal.capturedMap.delete(event.pointerId);\n                cancelPointer([]);\n              }\n            });\n          }\n        };\n    }\n\n    // Any other pointer goes here ...\n    return function handleEvent(event) {\n      const {\n        onPointerMissed,\n        internal\n      } = store.getState();\n\n      // prepareRay(event)\n      internal.lastEvent.current = event;\n\n      // Get fresh intersects\n      const isPointerMove = name === 'onPointerMove';\n      const isClickEvent = name === 'onClick' || name === 'onContextMenu' || name === 'onDoubleClick';\n      const filter = isPointerMove ? filterPointerEvents : undefined;\n      const hits = intersect(event, filter);\n      const delta = isClickEvent ? calculateDistance(event) : 0;\n\n      // Save initial coordinates on pointer-down\n      if (name === 'onPointerDown') {\n        internal.initialClick = [event.offsetX, event.offsetY];\n        internal.initialHits = hits.map(hit => hit.eventObject);\n      }\n\n      // If a click yields no results, pass it back to the user as a miss\n      // Missed events have to come first in order to establish user-land side-effect clean up\n      if (isClickEvent && !hits.length) {\n        if (delta <= 2) {\n          pointerMissed(event, internal.interaction);\n          if (onPointerMissed) onPointerMissed(event);\n        }\n      }\n      // Take care of unhover\n      if (isPointerMove) cancelPointer(hits);\n      function onIntersect(data) {\n        const eventObject = data.eventObject;\n        const instance = eventObject.__r3f;\n        const handlers = instance == null ? void 0 : instance.handlers;\n\n        // Check presence of handlers\n        if (!(instance != null && instance.eventCount)) return;\n\n        /*\r\n        MAYBE TODO, DELETE IF NOT: \r\n          Check if the object is captured, captured events should not have intersects running in parallel\r\n          But wouldn't it be better to just replace capturedMap with a single entry?\r\n          Also, are we OK with straight up making picking up multiple objects impossible?\r\n          \r\n        const pointerId = (data as ThreeEvent<PointerEvent>).pointerId        \r\n        if (pointerId !== undefined) {\r\n          const capturedMeshSet = internal.capturedMap.get(pointerId)\r\n          if (capturedMeshSet) {\r\n            const captured = capturedMeshSet.get(eventObject)\r\n            if (captured && captured.localState.stopped) return\r\n          }\r\n        }*/\n\n        if (isPointerMove) {\n          // Move event ...\n          if (handlers.onPointerOver || handlers.onPointerEnter || handlers.onPointerOut || handlers.onPointerLeave) {\n            // When enter or out is present take care of hover-state\n            const id = makeId(data);\n            const hoveredItem = internal.hovered.get(id);\n            if (!hoveredItem) {\n              // If the object wasn't previously hovered, book it and call its handler\n              internal.hovered.set(id, data);\n              handlers.onPointerOver == null ? void 0 : handlers.onPointerOver(data);\n              handlers.onPointerEnter == null ? void 0 : handlers.onPointerEnter(data);\n            } else if (hoveredItem.stopped) {\n              // If the object was previously hovered and stopped, we shouldn't allow other items to proceed\n              data.stopPropagation();\n            }\n          }\n          // Call mouse move\n          handlers.onPointerMove == null ? void 0 : handlers.onPointerMove(data);\n        } else {\n          // All other events ...\n          const handler = handlers[name];\n          if (handler) {\n            // Forward all events back to their respective handlers with the exception of click events,\n            // which must use the initial target\n            if (!isClickEvent || internal.initialHits.includes(eventObject)) {\n              // Missed events have to come first\n              pointerMissed(event, internal.interaction.filter(object => !internal.initialHits.includes(object)));\n              // Now call the handler\n              handler(data);\n            }\n          } else {\n            // Trigger onPointerMissed on all elements that have pointer over/out handlers, but not click and weren't hit\n            if (isClickEvent && internal.initialHits.includes(eventObject)) {\n              pointerMissed(event, internal.interaction.filter(object => !internal.initialHits.includes(object)));\n            }\n          }\n        }\n      }\n      handleIntersects(hits, event, delta, onIntersect);\n    };\n  }\n  return {\n    handlePointer\n  };\n}\n\n// Keys that shouldn't be copied between R3F stores\nconst privateKeys = ['set', 'get', 'setSize', 'setFrameloop', 'setDpr', 'events', 'invalidate', 'advance', 'size', 'viewport'];\nconst isRenderer = def => !!(def != null && def.render);\nconst context = /*#__PURE__*/React__namespace.createContext(null);\nconst createStore = (invalidate, advance) => {\n  const rootState = create__default[\"default\"]((set, get) => {\n    const position = new THREE__namespace.Vector3();\n    const defaultTarget = new THREE__namespace.Vector3();\n    const tempTarget = new THREE__namespace.Vector3();\n    function getCurrentViewport(camera = get().camera, target = defaultTarget, size = get().size) {\n      const {\n        width,\n        height,\n        top,\n        left\n      } = size;\n      const aspect = width / height;\n      if (target instanceof THREE__namespace.Vector3) tempTarget.copy(target);else tempTarget.set(...target);\n      const distance = camera.getWorldPosition(position).distanceTo(tempTarget);\n      if (isOrthographicCamera(camera)) {\n        return {\n          width: width / camera.zoom,\n          height: height / camera.zoom,\n          top,\n          left,\n          factor: 1,\n          distance,\n          aspect\n        };\n      } else {\n        const fov = camera.fov * Math.PI / 180; // convert vertical fov to radians\n        const h = 2 * Math.tan(fov / 2) * distance; // visible height\n        const w = h * (width / height);\n        return {\n          width: w,\n          height: h,\n          top,\n          left,\n          factor: width / w,\n          distance,\n          aspect\n        };\n      }\n    }\n    let performanceTimeout = undefined;\n    const setPerformanceCurrent = current => set(state => ({\n      performance: {\n        ...state.performance,\n        current\n      }\n    }));\n    const pointer = new THREE__namespace.Vector2();\n    const rootState = {\n      set,\n      get,\n      // Mock objects that have to be configured\n      gl: null,\n      camera: null,\n      raycaster: null,\n      events: {\n        priority: 1,\n        enabled: true,\n        connected: false\n      },\n      xr: null,\n      scene: null,\n      invalidate: (frames = 1) => invalidate(get(), frames),\n      advance: (timestamp, runGlobalEffects) => advance(timestamp, runGlobalEffects, get()),\n      legacy: false,\n      linear: false,\n      flat: false,\n      controls: null,\n      clock: new THREE__namespace.Clock(),\n      pointer,\n      mouse: pointer,\n      frameloop: 'always',\n      onPointerMissed: undefined,\n      performance: {\n        current: 1,\n        min: 0.5,\n        max: 1,\n        debounce: 200,\n        regress: () => {\n          const state = get();\n          // Clear timeout\n          if (performanceTimeout) clearTimeout(performanceTimeout);\n          // Set lower bound performance\n          if (state.performance.current !== state.performance.min) setPerformanceCurrent(state.performance.min);\n          // Go back to upper bound performance after a while unless something regresses meanwhile\n          performanceTimeout = setTimeout(() => setPerformanceCurrent(get().performance.max), state.performance.debounce);\n        }\n      },\n      size: {\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        updateStyle: false\n      },\n      viewport: {\n        initialDpr: 0,\n        dpr: 0,\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        aspect: 0,\n        distance: 0,\n        factor: 0,\n        getCurrentViewport\n      },\n      setEvents: events => set(state => ({\n        ...state,\n        events: {\n          ...state.events,\n          ...events\n        }\n      })),\n      setSize: (width, height, updateStyle, top, left) => {\n        const camera = get().camera;\n        const size = {\n          width,\n          height,\n          top: top || 0,\n          left: left || 0,\n          updateStyle\n        };\n        set(state => ({\n          size,\n          viewport: {\n            ...state.viewport,\n            ...getCurrentViewport(camera, defaultTarget, size)\n          }\n        }));\n      },\n      setDpr: dpr => set(state => {\n        const resolved = calculateDpr(dpr);\n        return {\n          viewport: {\n            ...state.viewport,\n            dpr: resolved,\n            initialDpr: state.viewport.initialDpr || resolved\n          }\n        };\n      }),\n      setFrameloop: (frameloop = 'always') => {\n        const clock = get().clock;\n\n        // if frameloop === \"never\" clock.elapsedTime is updated using advance(timestamp)\n        clock.stop();\n        clock.elapsedTime = 0;\n        if (frameloop !== 'never') {\n          clock.start();\n          clock.elapsedTime = 0;\n        }\n        set(() => ({\n          frameloop\n        }));\n      },\n      previousRoot: undefined,\n      internal: {\n        active: false,\n        priority: 0,\n        frames: 0,\n        lastEvent: /*#__PURE__*/React__namespace.createRef(),\n        interaction: [],\n        hovered: new Map(),\n        subscribers: [],\n        initialClick: [0, 0],\n        initialHits: [],\n        capturedMap: new Map(),\n        subscribe: (ref, priority, store) => {\n          const internal = get().internal;\n          // If this subscription was given a priority, it takes rendering into its own hands\n          // For that reason we switch off automatic rendering and increase the manual flag\n          // As long as this flag is positive there can be no internal rendering at all\n          // because there could be multiple render subscriptions\n          internal.priority = internal.priority + (priority > 0 ? 1 : 0);\n          internal.subscribers.push({\n            ref,\n            priority,\n            store\n          });\n          // Register subscriber and sort layers from lowest to highest, meaning,\n          // highest priority renders last (on top of the other frames)\n          internal.subscribers = internal.subscribers.sort((a, b) => a.priority - b.priority);\n          return () => {\n            const internal = get().internal;\n            if (internal != null && internal.subscribers) {\n              // Decrease manual flag if this subscription had a priority\n              internal.priority = internal.priority - (priority > 0 ? 1 : 0);\n              // Remove subscriber from list\n              internal.subscribers = internal.subscribers.filter(s => s.ref !== ref);\n            }\n          };\n        }\n      }\n    };\n    return rootState;\n  });\n  const state = rootState.getState();\n  let oldSize = state.size;\n  let oldDpr = state.viewport.dpr;\n  let oldCamera = state.camera;\n  rootState.subscribe(() => {\n    const {\n      camera,\n      size,\n      viewport,\n      gl,\n      set\n    } = rootState.getState();\n\n    // Resize camera and renderer on changes to size and pixelratio\n    if (size.width !== oldSize.width || size.height !== oldSize.height || viewport.dpr !== oldDpr) {\n      var _size$updateStyle;\n      oldSize = size;\n      oldDpr = viewport.dpr;\n      // Update camera & renderer\n      updateCamera(camera, size);\n      gl.setPixelRatio(viewport.dpr);\n      const updateStyle = (_size$updateStyle = size.updateStyle) != null ? _size$updateStyle : typeof HTMLCanvasElement !== 'undefined' && gl.domElement instanceof HTMLCanvasElement;\n      gl.setSize(size.width, size.height, updateStyle);\n    }\n\n    // Update viewport once the camera changes\n    if (camera !== oldCamera) {\n      oldCamera = camera;\n      // Update viewport\n      set(state => ({\n        viewport: {\n          ...state.viewport,\n          ...state.viewport.getCurrentViewport(camera)\n        }\n      }));\n    }\n  });\n\n  // Invalidate on any change\n  rootState.subscribe(state => invalidate(state));\n\n  // Return root state\n  return rootState;\n};\n\nfunction createSubs(callback, subs) {\n  const sub = {\n    callback\n  };\n  subs.add(sub);\n  return () => void subs.delete(sub);\n}\nlet i;\nlet globalEffects = new Set();\nlet globalAfterEffects = new Set();\nlet globalTailEffects = new Set();\n\n/**\r\n * Adds a global render callback which is called each frame.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addEffect\r\n */\nconst addEffect = callback => createSubs(callback, globalEffects);\n\n/**\r\n * Adds a global after-render callback which is called each frame.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addAfterEffect\r\n */\nconst addAfterEffect = callback => createSubs(callback, globalAfterEffects);\n\n/**\r\n * Adds a global callback which is called when rendering stops.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addTail\r\n */\nconst addTail = callback => createSubs(callback, globalTailEffects);\nfunction run(effects, timestamp) {\n  if (!effects.size) return;\n  for (const {\n    callback\n  } of effects.values()) {\n    callback(timestamp);\n  }\n}\nfunction flushGlobalEffects(type, timestamp) {\n  switch (type) {\n    case 'before':\n      return run(globalEffects, timestamp);\n    case 'after':\n      return run(globalAfterEffects, timestamp);\n    case 'tail':\n      return run(globalTailEffects, timestamp);\n  }\n}\nlet subscribers;\nlet subscription;\nfunction render$1(timestamp, state, frame) {\n  // Run local effects\n  let delta = state.clock.getDelta();\n  // In frameloop='never' mode, clock times are updated using the provided timestamp\n  if (state.frameloop === 'never' && typeof timestamp === 'number') {\n    delta = timestamp - state.clock.elapsedTime;\n    state.clock.oldTime = state.clock.elapsedTime;\n    state.clock.elapsedTime = timestamp;\n  }\n  // Call subscribers (useFrame)\n  subscribers = state.internal.subscribers;\n  for (i = 0; i < subscribers.length; i++) {\n    subscription = subscribers[i];\n    subscription.ref.current(subscription.store.getState(), delta, frame);\n  }\n  // Render content\n  if (!state.internal.priority && state.gl.render) state.gl.render(state.scene, state.camera);\n  // Decrease frame count\n  state.internal.frames = Math.max(0, state.internal.frames - 1);\n  return state.frameloop === 'always' ? 1 : state.internal.frames;\n}\nfunction createLoop(roots) {\n  let running = false;\n  let repeat;\n  let frame;\n  let state;\n  function loop(timestamp) {\n    frame = requestAnimationFrame(loop);\n    running = true;\n    repeat = 0;\n\n    // Run effects\n    flushGlobalEffects('before', timestamp);\n\n    // Render all roots\n    for (const root of roots.values()) {\n      var _state$gl$xr;\n      state = root.store.getState();\n      // If the frameloop is invalidated, do not run another frame\n      if (state.internal.active && (state.frameloop === 'always' || state.internal.frames > 0) && !((_state$gl$xr = state.gl.xr) != null && _state$gl$xr.isPresenting)) {\n        repeat += render$1(timestamp, state);\n      }\n    }\n\n    // Run after-effects\n    flushGlobalEffects('after', timestamp);\n\n    // Stop the loop if nothing invalidates it\n    if (repeat === 0) {\n      // Tail call effects, they are called when rendering stops\n      flushGlobalEffects('tail', timestamp);\n\n      // Flag end of operation\n      running = false;\n      return cancelAnimationFrame(frame);\n    }\n  }\n  function invalidate(state, frames = 1) {\n    var _state$gl$xr2;\n    if (!state) return roots.forEach(root => invalidate(root.store.getState()), frames);\n    if ((_state$gl$xr2 = state.gl.xr) != null && _state$gl$xr2.isPresenting || !state.internal.active || state.frameloop === 'never') return;\n    // Increase frames, do not go higher than 60\n    state.internal.frames = Math.min(60, state.internal.frames + frames);\n    // If the render-loop isn't active, start it\n    if (!running) {\n      running = true;\n      requestAnimationFrame(loop);\n    }\n  }\n  function advance(timestamp, runGlobalEffects = true, state, frame) {\n    if (runGlobalEffects) flushGlobalEffects('before', timestamp);\n    if (!state) for (const root of roots.values()) render$1(timestamp, root.store.getState());else render$1(timestamp, state, frame);\n    if (runGlobalEffects) flushGlobalEffects('after', timestamp);\n  }\n  return {\n    loop,\n    /**\r\n     * Invalidates the view, requesting a frame to be rendered. Will globally invalidate unless passed a root's state.\r\n     * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#invalidate\r\n     */\n    invalidate,\n    /**\r\n     * Advances the frameloop and runs render effects, useful for when manually rendering via `frameloop=\"never\"`.\r\n     * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#advance\r\n     */\n    advance\n  };\n}\n\n/**\r\n * Exposes an object's {@link LocalState}.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#useInstanceHandle\r\n *\r\n * **Note**: this is an escape hatch to react-internal fields. Expect this to change significantly between versions.\r\n */\nfunction useInstanceHandle(ref) {\n  const instance = React__namespace.useRef(null);\n  useIsomorphicLayoutEffect(() => void (instance.current = ref.current.__r3f), [ref]);\n  return instance;\n}\nfunction useStore() {\n  const store = React__namespace.useContext(context);\n  if (!store) throw new Error('R3F: Hooks can only be used within the Canvas component!');\n  return store;\n}\n\n/**\r\n * Accesses R3F's internal state, containing renderer, canvas, scene, etc.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usethree\r\n */\nfunction useThree(selector = state => state, equalityFn) {\n  return useStore()(selector, equalityFn);\n}\n\n/**\r\n * Executes a callback before render in a shared frame loop.\r\n * Can order effects with render priority or manually render with a positive priority.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useframe\r\n */\nfunction useFrame(callback, renderPriority = 0) {\n  const store = useStore();\n  const subscribe = store.getState().internal.subscribe;\n  // Memoize ref\n  const ref = useMutableCallback(callback);\n  // Subscribe on mount, unsubscribe on unmount\n  useIsomorphicLayoutEffect(() => subscribe(ref, renderPriority, store), [renderPriority, subscribe, store]);\n  return null;\n}\n\n/**\r\n * Returns a node graph of an object with named nodes & materials.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usegraph\r\n */\nfunction useGraph(object) {\n  return React__namespace.useMemo(() => buildGraph(object), [object]);\n}\nconst memoizedLoaders = new WeakMap();\nfunction loadingFn(extensions, onProgress) {\n  return function (Proto, ...input) {\n    // Construct new loader and run extensions\n    let loader = memoizedLoaders.get(Proto);\n    if (!loader) {\n      loader = new Proto();\n      memoizedLoaders.set(Proto, loader);\n    }\n    if (extensions) extensions(loader);\n    // Go through the urls and load them\n    return Promise.all(input.map(input => new Promise((res, reject) => loader.load(input, data => {\n      if (data.scene) Object.assign(data, buildGraph(data.scene));\n      res(data);\n    }, onProgress, error => reject(new Error(`Could not load ${input}: ${error == null ? void 0 : error.message}`)))))).finally(() => loader.dispose == null ? void 0 : loader.dispose());\n  };\n}\n\n/**\r\n * Synchronously loads and caches assets with a three loader.\r\n *\r\n * Note: this hook's caller must be wrapped with `React.Suspense`\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useloader\r\n */\nfunction useLoader(Proto, input, extensions, onProgress) {\n  // Use suspense to load async assets\n  const keys = Array.isArray(input) ? input : [input];\n  const results = suspendReact.suspend(loadingFn(extensions, onProgress), [Proto, ...keys], {\n    equal: is.equ\n  });\n  // Return the object/s\n  return Array.isArray(input) ? results : results[0];\n}\n\n/**\r\n * Preloads an asset into cache as a side-effect.\r\n */\nuseLoader.preload = function (Proto, input, extensions) {\n  const keys = Array.isArray(input) ? input : [input];\n  return suspendReact.preload(loadingFn(extensions), [Proto, ...keys]);\n};\n\n/**\r\n * Removes a loaded asset from cache.\r\n */\nuseLoader.clear = function (Proto, input) {\n  const keys = Array.isArray(input) ? input : [input];\n  return suspendReact.clear([Proto, ...keys]);\n};\n\nconst roots = new Map();\nconst {\n  invalidate,\n  advance\n} = createLoop(roots);\nconst {\n  reconciler,\n  applyProps\n} = createRenderer(roots, getEventPriority);\nconst shallowLoose = {\n  objects: 'shallow',\n  strict: false\n};\nconst createRendererInstance = (gl, canvas) => {\n  const customRenderer = typeof gl === 'function' ? gl(canvas) : gl;\n  if (isRenderer(customRenderer)) return customRenderer;else return new THREE__namespace.WebGLRenderer({\n    powerPreference: 'high-performance',\n    canvas: canvas,\n    antialias: true,\n    alpha: true,\n    ...gl\n  });\n};\nfunction computeInitialSize(canvas, defaultSize) {\n  const defaultStyle = typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement;\n  if (defaultSize) {\n    const {\n      width,\n      height,\n      top,\n      left,\n      updateStyle = defaultStyle\n    } = defaultSize;\n    return {\n      width,\n      height,\n      top,\n      left,\n      updateStyle\n    };\n  } else if (typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement && canvas.parentElement) {\n    const {\n      width,\n      height,\n      top,\n      left\n    } = canvas.parentElement.getBoundingClientRect();\n    return {\n      width,\n      height,\n      top,\n      left,\n      updateStyle: defaultStyle\n    };\n  } else if (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return {\n      width: canvas.width,\n      height: canvas.height,\n      top: 0,\n      left: 0,\n      updateStyle: defaultStyle\n    };\n  }\n  return {\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0\n  };\n}\nfunction createRoot(canvas) {\n  // Check against mistaken use of createRoot\n  const prevRoot = roots.get(canvas);\n  const prevFiber = prevRoot == null ? void 0 : prevRoot.fiber;\n  const prevStore = prevRoot == null ? void 0 : prevRoot.store;\n  if (prevRoot) console.warn('R3F.createRoot should only be called once!');\n\n  // Report when an error was detected in a previous render\n  // https://github.com/pmndrs/react-three-fiber/pull/2261\n  const logRecoverableError = typeof reportError === 'function' ?\n  // In modern browsers, reportError will dispatch an error event,\n  // emulating an uncaught JavaScript error.\n  reportError :\n  // In older browsers and test environments, fallback to console.error.\n  console.error;\n\n  // Create store\n  const store = prevStore || createStore(invalidate, advance);\n  // Create renderer\n  const fiber = prevFiber || reconciler.createContainer(store, constants.ConcurrentRoot, null, false, null, '', logRecoverableError, null);\n  // Map it\n  if (!prevRoot) roots.set(canvas, {\n    fiber,\n    store\n  });\n\n  // Locals\n  let onCreated;\n  let configured = false;\n  let lastCamera;\n  return {\n    configure(props = {}) {\n      let {\n        gl: glConfig,\n        size: propsSize,\n        scene: sceneOptions,\n        events,\n        onCreated: onCreatedCallback,\n        shadows = false,\n        linear = false,\n        flat = false,\n        legacy = false,\n        orthographic = false,\n        frameloop = 'always',\n        dpr = [1, 2],\n        performance,\n        raycaster: raycastOptions,\n        camera: cameraOptions,\n        onPointerMissed\n      } = props;\n      let state = store.getState();\n\n      // Set up renderer (one time only!)\n      let gl = state.gl;\n      if (!state.gl) state.set({\n        gl: gl = createRendererInstance(glConfig, canvas)\n      });\n\n      // Set up raycaster (one time only!)\n      let raycaster = state.raycaster;\n      if (!raycaster) state.set({\n        raycaster: raycaster = new THREE__namespace.Raycaster()\n      });\n\n      // Set raycaster options\n      const {\n        params,\n        ...options\n      } = raycastOptions || {};\n      if (!is.equ(options, raycaster, shallowLoose)) applyProps(raycaster, {\n        ...options\n      });\n      if (!is.equ(params, raycaster.params, shallowLoose)) applyProps(raycaster, {\n        params: {\n          ...raycaster.params,\n          ...params\n        }\n      });\n\n      // Create default camera, don't overwrite any user-set state\n      if (!state.camera || state.camera === lastCamera && !is.equ(lastCamera, cameraOptions, shallowLoose)) {\n        lastCamera = cameraOptions;\n        const isCamera = cameraOptions instanceof THREE__namespace.Camera;\n        const camera = isCamera ? cameraOptions : orthographic ? new THREE__namespace.OrthographicCamera(0, 0, 0, 0, 0.1, 1000) : new THREE__namespace.PerspectiveCamera(75, 0, 0.1, 1000);\n        if (!isCamera) {\n          camera.position.z = 5;\n          if (cameraOptions) applyProps(camera, cameraOptions);\n          // Always look at center by default\n          if (!state.camera && !(cameraOptions != null && cameraOptions.rotation)) camera.lookAt(0, 0, 0);\n        }\n        state.set({\n          camera\n        });\n\n        // Configure raycaster\n        // https://github.com/pmndrs/react-xr/issues/300\n        raycaster.camera = camera;\n      }\n\n      // Set up scene (one time only!)\n      if (!state.scene) {\n        let scene;\n        if (sceneOptions instanceof THREE__namespace.Scene) {\n          scene = sceneOptions;\n        } else {\n          scene = new THREE__namespace.Scene();\n          if (sceneOptions) applyProps(scene, sceneOptions);\n        }\n        state.set({\n          scene: prepare(scene)\n        });\n      }\n\n      // Set up XR (one time only!)\n      if (!state.xr) {\n        var _gl$xr;\n        // Handle frame behavior in WebXR\n        const handleXRFrame = (timestamp, frame) => {\n          const state = store.getState();\n          if (state.frameloop === 'never') return;\n          advance(timestamp, true, state, frame);\n        };\n\n        // Toggle render switching on session\n        const handleSessionChange = () => {\n          const state = store.getState();\n          state.gl.xr.enabled = state.gl.xr.isPresenting;\n          state.gl.xr.setAnimationLoop(state.gl.xr.isPresenting ? handleXRFrame : null);\n          if (!state.gl.xr.isPresenting) invalidate(state);\n        };\n\n        // WebXR session manager\n        const xr = {\n          connect() {\n            const gl = store.getState().gl;\n            gl.xr.addEventListener('sessionstart', handleSessionChange);\n            gl.xr.addEventListener('sessionend', handleSessionChange);\n          },\n          disconnect() {\n            const gl = store.getState().gl;\n            gl.xr.removeEventListener('sessionstart', handleSessionChange);\n            gl.xr.removeEventListener('sessionend', handleSessionChange);\n          }\n        };\n\n        // Subscribe to WebXR session events\n        if (typeof ((_gl$xr = gl.xr) == null ? void 0 : _gl$xr.addEventListener) === 'function') xr.connect();\n        state.set({\n          xr\n        });\n      }\n\n      // Set shadowmap\n      if (gl.shadowMap) {\n        const oldEnabled = gl.shadowMap.enabled;\n        const oldType = gl.shadowMap.type;\n        gl.shadowMap.enabled = !!shadows;\n        if (is.boo(shadows)) {\n          gl.shadowMap.type = THREE__namespace.PCFSoftShadowMap;\n        } else if (is.str(shadows)) {\n          var _types$shadows;\n          const types = {\n            basic: THREE__namespace.BasicShadowMap,\n            percentage: THREE__namespace.PCFShadowMap,\n            soft: THREE__namespace.PCFSoftShadowMap,\n            variance: THREE__namespace.VSMShadowMap\n          };\n          gl.shadowMap.type = (_types$shadows = types[shadows]) != null ? _types$shadows : THREE__namespace.PCFSoftShadowMap;\n        } else if (is.obj(shadows)) {\n          Object.assign(gl.shadowMap, shadows);\n        }\n        if (oldEnabled !== gl.shadowMap.enabled || oldType !== gl.shadowMap.type) gl.shadowMap.needsUpdate = true;\n      }\n\n      // Safely set color management if available.\n      // Avoid accessing THREE.ColorManagement to play nice with older versions\n      const ColorManagement = getColorManagement();\n      if (ColorManagement) {\n        if ('enabled' in ColorManagement) ColorManagement.enabled = !legacy;else if ('legacyMode' in ColorManagement) ColorManagement.legacyMode = legacy;\n      }\n\n      // Set color space and tonemapping preferences\n      const LinearEncoding = 3000;\n      const sRGBEncoding = 3001;\n      applyProps(gl, {\n        outputEncoding: linear ? LinearEncoding : sRGBEncoding,\n        toneMapping: flat ? THREE__namespace.NoToneMapping : THREE__namespace.ACESFilmicToneMapping\n      });\n\n      // Update color management state\n      if (state.legacy !== legacy) state.set(() => ({\n        legacy\n      }));\n      if (state.linear !== linear) state.set(() => ({\n        linear\n      }));\n      if (state.flat !== flat) state.set(() => ({\n        flat\n      }));\n\n      // Set gl props\n      if (glConfig && !is.fun(glConfig) && !isRenderer(glConfig) && !is.equ(glConfig, gl, shallowLoose)) applyProps(gl, glConfig);\n      // Store events internally\n      if (events && !state.events.handlers) state.set({\n        events: events(store)\n      });\n      // Check size, allow it to take on container bounds initially\n      const size = computeInitialSize(canvas, propsSize);\n      if (!is.equ(size, state.size, shallowLoose)) {\n        state.setSize(size.width, size.height, size.updateStyle, size.top, size.left);\n      }\n      // Check pixelratio\n      if (dpr && state.viewport.dpr !== calculateDpr(dpr)) state.setDpr(dpr);\n      // Check frameloop\n      if (state.frameloop !== frameloop) state.setFrameloop(frameloop);\n      // Check pointer missed\n      if (!state.onPointerMissed) state.set({\n        onPointerMissed\n      });\n      // Check performance\n      if (performance && !is.equ(performance, state.performance, shallowLoose)) state.set(state => ({\n        performance: {\n          ...state.performance,\n          ...performance\n        }\n      }));\n\n      // Set locals\n      onCreated = onCreatedCallback;\n      configured = true;\n      return this;\n    },\n    render(children) {\n      // The root has to be configured before it can be rendered\n      if (!configured) this.configure();\n      reconciler.updateContainer( /*#__PURE__*/React__namespace.createElement(Provider, {\n        store: store,\n        children: children,\n        onCreated: onCreated,\n        rootElement: canvas\n      }), fiber, null, () => undefined);\n      return store;\n    },\n    unmount() {\n      unmountComponentAtNode(canvas);\n    }\n  };\n}\nfunction render(children, canvas, config) {\n  console.warn('R3F.render is no longer supported in React 18. Use createRoot instead!');\n  const root = createRoot(canvas);\n  root.configure(config);\n  return root.render(children);\n}\nfunction Provider({\n  store,\n  children,\n  onCreated,\n  rootElement\n}) {\n  useIsomorphicLayoutEffect(() => {\n    const state = store.getState();\n    // Flag the canvas active, rendering will now begin\n    state.set(state => ({\n      internal: {\n        ...state.internal,\n        active: true\n      }\n    }));\n    // Notifiy that init is completed, the scene graph exists, but nothing has yet rendered\n    if (onCreated) onCreated(state);\n    // Connect events to the targets parent, this is done to ensure events are registered on\n    // a shared target, and not on the canvas itself\n    if (!store.getState().events.connected) state.events.connect == null ? void 0 : state.events.connect(rootElement);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/React__namespace.createElement(context.Provider, {\n    value: store\n  }, children);\n}\nfunction unmountComponentAtNode(canvas, callback) {\n  const root = roots.get(canvas);\n  const fiber = root == null ? void 0 : root.fiber;\n  if (fiber) {\n    const state = root == null ? void 0 : root.store.getState();\n    if (state) state.internal.active = false;\n    reconciler.updateContainer(null, fiber, null, () => {\n      if (state) {\n        setTimeout(() => {\n          try {\n            var _state$gl, _state$gl$renderLists, _state$gl2, _state$gl3;\n            state.events.disconnect == null ? void 0 : state.events.disconnect();\n            (_state$gl = state.gl) == null ? void 0 : (_state$gl$renderLists = _state$gl.renderLists) == null ? void 0 : _state$gl$renderLists.dispose == null ? void 0 : _state$gl$renderLists.dispose();\n            (_state$gl2 = state.gl) == null ? void 0 : _state$gl2.forceContextLoss == null ? void 0 : _state$gl2.forceContextLoss();\n            if ((_state$gl3 = state.gl) != null && _state$gl3.xr) state.xr.disconnect();\n            dispose(state);\n            roots.delete(canvas);\n            if (callback) callback(canvas);\n          } catch (e) {\n            /* ... */\n          }\n        }, 500);\n      }\n    });\n  }\n}\nfunction createPortal(children, container, state) {\n  return /*#__PURE__*/React__namespace.createElement(Portal, {\n    key: container.uuid,\n    children: children,\n    container: container,\n    state: state\n  });\n}\nfunction Portal({\n  state = {},\n  children,\n  container\n}) {\n  /** This has to be a component because it would not be able to call useThree/useStore otherwise since\r\n   *  if this is our environment, then we are not in r3f's renderer but in react-dom, it would trigger\r\n   *  the \"R3F hooks can only be used within the Canvas component!\" warning:\r\n   *  <Canvas>\r\n   *    {createPortal(...)} */\n  const {\n    events,\n    size,\n    ...rest\n  } = state;\n  const previousRoot = useStore();\n  const [raycaster] = React__namespace.useState(() => new THREE__namespace.Raycaster());\n  const [pointer] = React__namespace.useState(() => new THREE__namespace.Vector2());\n  const inject = React__namespace.useCallback((rootState, injectState) => {\n    const intersect = {\n      ...rootState\n    }; // all prev state props\n\n    // Only the fields of \"rootState\" that do not differ from injectState\n    // Some props should be off-limits\n    // Otherwise filter out the props that are different and let the inject layer take precedence\n    Object.keys(rootState).forEach(key => {\n      if (\n      // Some props should be off-limits\n      privateKeys.includes(key) ||\n      // Otherwise filter out the props that are different and let the inject layer take precedence\n      // Unless the inject layer props is undefined, then we keep the root layer\n      rootState[key] !== injectState[key] && injectState[key]) {\n        delete intersect[key];\n      }\n    });\n    let viewport = undefined;\n    if (injectState && size) {\n      const camera = injectState.camera;\n      // Calculate the override viewport, if present\n      viewport = rootState.viewport.getCurrentViewport(camera, new THREE__namespace.Vector3(), size);\n      // Update the portal camera, if it differs from the previous layer\n      if (camera !== rootState.camera) updateCamera(camera, size);\n    }\n    return {\n      // The intersect consists of the previous root state\n      ...intersect,\n      // Portals have their own scene, which forms the root, a raycaster and a pointer\n      scene: container,\n      raycaster,\n      pointer,\n      mouse: pointer,\n      // Their previous root is the layer before it\n      previousRoot,\n      // Events, size and viewport can be overridden by the inject layer\n      events: {\n        ...rootState.events,\n        ...(injectState == null ? void 0 : injectState.events),\n        ...events\n      },\n      size: {\n        ...rootState.size,\n        ...size\n      },\n      viewport: {\n        ...rootState.viewport,\n        ...viewport\n      },\n      ...rest\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [state]);\n  const [usePortalStore] = React__namespace.useState(() => {\n    // Create a mirrored store, based on the previous root with a few overrides ...\n    const previousState = previousRoot.getState();\n    const store = create__default[\"default\"]((set, get) => ({\n      ...previousState,\n      scene: container,\n      raycaster,\n      pointer,\n      mouse: pointer,\n      previousRoot,\n      events: {\n        ...previousState.events,\n        ...events\n      },\n      size: {\n        ...previousState.size,\n        ...size\n      },\n      ...rest,\n      // Set and get refer to this root-state\n      set,\n      get,\n      // Layers are allowed to override events\n      setEvents: events => set(state => ({\n        ...state,\n        events: {\n          ...state.events,\n          ...events\n        }\n      }))\n    }));\n    return store;\n  });\n  React__namespace.useEffect(() => {\n    // Subscribe to previous root-state and copy changes over to the mirrored portal-state\n    const unsub = previousRoot.subscribe(prev => usePortalStore.setState(state => inject(prev, state)));\n    return () => {\n      unsub();\n      usePortalStore.destroy();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  React__namespace.useEffect(() => {\n    usePortalStore.setState(injectState => inject(previousRoot.getState(), injectState));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inject]);\n  return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, reconciler.createPortal( /*#__PURE__*/React__namespace.createElement(context.Provider, {\n    value: usePortalStore\n  }, children), usePortalStore, null));\n}\nreconciler.injectIntoDevTools({\n  bundleType:  false ? 0 : 1,\n  rendererPackageName: '@react-three/fiber',\n  version: React__namespace.version\n});\nconst act = React__namespace.unstable_act;\n\nexports.Block = Block;\nexports.ErrorBoundary = ErrorBoundary;\nexports.act = act;\nexports.addAfterEffect = addAfterEffect;\nexports.addEffect = addEffect;\nexports.addTail = addTail;\nexports.advance = advance;\nexports.applyProps = applyProps;\nexports.buildGraph = buildGraph;\nexports.context = context;\nexports.createEvents = createEvents;\nexports.createPortal = createPortal;\nexports.createRoot = createRoot;\nexports.dispose = dispose;\nexports.extend = extend;\nexports.flushGlobalEffects = flushGlobalEffects;\nexports.getRootState = getRootState;\nexports.invalidate = invalidate;\nexports.isRef = isRef;\nexports.reconciler = reconciler;\nexports.render = render;\nexports.roots = roots;\nexports.threeTypes = threeTypes;\nexports.unmountComponentAtNode = unmountComponentAtNode;\nexports.useFrame = useFrame;\nexports.useGraph = useGraph;\nexports.useInstanceHandle = useInstanceHandle;\nexports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;\nexports.useLoader = useLoader;\nexports.useMutableCallback = useMutableCallback;\nexports.useStore = useStore;\nexports.useThree = useThree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/index-b3e44f21.cjs.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.dev.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.dev.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar index = __webpack_require__(/*! ./index-b3e44f21.cjs.dev.js */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-b3e44f21.cjs.dev.js\");\nvar _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nvar useMeasure = __webpack_require__(/*! react-use-measure */ \"(ssr)/./node_modules/react-use-measure/dist/web.cjs.js\");\nvar itsFine = __webpack_require__(/*! its-fine */ \"(ssr)/./node_modules/its-fine/dist/index.cjs\");\n__webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\n__webpack_require__(/*! zustand */ \"(ssr)/./node_modules/zustand/esm/index.js\");\n__webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\n__webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\");\n__webpack_require__(/*! suspend-react */ \"(ssr)/./node_modules/suspend-react/index.cjs.js\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nvar THREE__namespace = /*#__PURE__*/_interopNamespace(THREE);\nvar useMeasure__default = /*#__PURE__*/_interopDefault(useMeasure);\n\nconst DOM_EVENTS = {\n  onClick: ['click', false],\n  onContextMenu: ['contextmenu', false],\n  onDoubleClick: ['dblclick', false],\n  onWheel: ['wheel', true],\n  onPointerDown: ['pointerdown', true],\n  onPointerUp: ['pointerup', true],\n  onPointerLeave: ['pointerleave', true],\n  onPointerMove: ['pointermove', true],\n  onPointerCancel: ['pointercancel', true],\n  onLostPointerCapture: ['lostpointercapture', true]\n};\n\n/** Default R3F event manager for web */\nfunction createPointerEvents(store) {\n  const {\n    handlePointer\n  } = index.createEvents(store);\n  return {\n    priority: 1,\n    enabled: true,\n    compute(event, state, previous) {\n      // https://github.com/pmndrs/react-three-fiber/pull/782\n      // Events trigger outside of canvas when moved, use offsetX/Y by default and allow overrides\n      state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n      state.raycaster.setFromCamera(state.pointer, state.camera);\n    },\n    connected: undefined,\n    handlers: Object.keys(DOM_EVENTS).reduce((acc, key) => ({\n      ...acc,\n      [key]: handlePointer(key)\n    }), {}),\n    update: () => {\n      var _internal$lastEvent;\n      const {\n        events,\n        internal\n      } = store.getState();\n      if ((_internal$lastEvent = internal.lastEvent) != null && _internal$lastEvent.current && events.handlers) events.handlers.onPointerMove(internal.lastEvent.current);\n    },\n    connect: target => {\n      var _events$handlers;\n      const {\n        set,\n        events\n      } = store.getState();\n      events.disconnect == null ? void 0 : events.disconnect();\n      set(state => ({\n        events: {\n          ...state.events,\n          connected: target\n        }\n      }));\n      Object.entries((_events$handlers = events.handlers) != null ? _events$handlers : []).forEach(([name, event]) => {\n        const [eventName, passive] = DOM_EVENTS[name];\n        target.addEventListener(eventName, event, {\n          passive\n        });\n      });\n    },\n    disconnect: () => {\n      const {\n        set,\n        events\n      } = store.getState();\n      if (events.connected) {\n        var _events$handlers2;\n        Object.entries((_events$handlers2 = events.handlers) != null ? _events$handlers2 : []).forEach(([name, event]) => {\n          if (events && events.connected instanceof HTMLElement) {\n            const [eventName] = DOM_EVENTS[name];\n            events.connected.removeEventListener(eventName, event);\n          }\n        });\n        set(state => ({\n          events: {\n            ...state.events,\n            connected: undefined\n          }\n        }));\n      }\n    }\n  };\n}\n\nconst CanvasImpl = /*#__PURE__*/React__namespace.forwardRef(function Canvas({\n  children,\n  fallback,\n  resize,\n  style,\n  gl,\n  events = createPointerEvents,\n  eventSource,\n  eventPrefix,\n  shadows,\n  linear,\n  flat,\n  legacy,\n  orthographic,\n  frameloop,\n  dpr,\n  performance,\n  raycaster,\n  camera,\n  scene,\n  onPointerMissed,\n  onCreated,\n  ...props\n}, forwardedRef) {\n  // Create a known catalogue of Threejs-native elements\n  // This will include the entire THREE namespace by default, users can extend\n  // their own elements by using the createRoot API instead\n  React__namespace.useMemo(() => index.extend(THREE__namespace), []);\n  const Bridge = itsFine.useContextBridge();\n  const [containerRef, containerRect] = useMeasure__default[\"default\"]({\n    scroll: true,\n    debounce: {\n      scroll: 50,\n      resize: 0\n    },\n    ...resize\n  });\n  const canvasRef = React__namespace.useRef(null);\n  const divRef = React__namespace.useRef(null);\n  React__namespace.useImperativeHandle(forwardedRef, () => canvasRef.current);\n  const handlePointerMissed = index.useMutableCallback(onPointerMissed);\n  const [block, setBlock] = React__namespace.useState(false);\n  const [error, setError] = React__namespace.useState(false);\n\n  // Suspend this component if block is a promise (2nd run)\n  if (block) throw block;\n  // Throw exception outwards if anything within canvas throws\n  if (error) throw error;\n  const root = React__namespace.useRef(null);\n  index.useIsomorphicLayoutEffect(() => {\n    const canvas = canvasRef.current;\n    if (containerRect.width > 0 && containerRect.height > 0 && canvas) {\n      if (!root.current) root.current = index.createRoot(canvas);\n      root.current.configure({\n        gl,\n        events,\n        shadows,\n        linear,\n        flat,\n        legacy,\n        orthographic,\n        frameloop,\n        dpr,\n        performance,\n        raycaster,\n        camera,\n        scene,\n        size: containerRect,\n        // Pass mutable reference to onPointerMissed so it's free to update\n        onPointerMissed: (...args) => handlePointerMissed.current == null ? void 0 : handlePointerMissed.current(...args),\n        onCreated: state => {\n          // Connect to event source\n          state.events.connect == null ? void 0 : state.events.connect(eventSource ? index.isRef(eventSource) ? eventSource.current : eventSource : divRef.current);\n          // Set up compute function\n          if (eventPrefix) {\n            state.setEvents({\n              compute: (event, state) => {\n                const x = event[eventPrefix + 'X'];\n                const y = event[eventPrefix + 'Y'];\n                state.pointer.set(x / state.size.width * 2 - 1, -(y / state.size.height) * 2 + 1);\n                state.raycaster.setFromCamera(state.pointer, state.camera);\n              }\n            });\n          }\n          // Call onCreated callback\n          onCreated == null ? void 0 : onCreated(state);\n        }\n      });\n      root.current.render( /*#__PURE__*/React__namespace.createElement(Bridge, null, /*#__PURE__*/React__namespace.createElement(index.ErrorBoundary, {\n        set: setError\n      }, /*#__PURE__*/React__namespace.createElement(React__namespace.Suspense, {\n        fallback: /*#__PURE__*/React__namespace.createElement(index.Block, {\n          set: setBlock\n        })\n      }, children))));\n    }\n  });\n  React__namespace.useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) return () => index.unmountComponentAtNode(canvas);\n  }, []);\n\n  // When the event source is not this div, we need to set pointer-events to none\n  // Or else the canvas will block events from reaching the event source\n  const pointerEvents = eventSource ? 'none' : 'auto';\n  return /*#__PURE__*/React__namespace.createElement(\"div\", _extends({\n    ref: divRef,\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      pointerEvents,\n      ...style\n    }\n  }, props), /*#__PURE__*/React__namespace.createElement(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, /*#__PURE__*/React__namespace.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: 'block'\n    }\n  }, fallback)));\n});\n\n/**\r\n * A DOM canvas which accepts threejs elements as children.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/canvas\r\n */\nconst Canvas = /*#__PURE__*/React__namespace.forwardRef(function CanvasWrapper(props, ref) {\n  return /*#__PURE__*/React__namespace.createElement(itsFine.FiberProvider, null, /*#__PURE__*/React__namespace.createElement(CanvasImpl, _extends({}, props, {\n    ref: ref\n  })));\n});\n\nexports.ReactThreeFiber = index.threeTypes;\nexports._roots = index.roots;\nexports.act = index.act;\nexports.addAfterEffect = index.addAfterEffect;\nexports.addEffect = index.addEffect;\nexports.addTail = index.addTail;\nexports.advance = index.advance;\nexports.applyProps = index.applyProps;\nexports.buildGraph = index.buildGraph;\nexports.context = index.context;\nexports.createEvents = index.createEvents;\nexports.createPortal = index.createPortal;\nexports.createRoot = index.createRoot;\nexports.dispose = index.dispose;\nexports.extend = index.extend;\nexports.flushGlobalEffects = index.flushGlobalEffects;\nexports.getRootState = index.getRootState;\nexports.invalidate = index.invalidate;\nexports.reconciler = index.reconciler;\nexports.render = index.render;\nexports.unmountComponentAtNode = index.unmountComponentAtNode;\nexports.useFrame = index.useFrame;\nexports.useGraph = index.useGraph;\nexports.useInstanceHandle = index.useInstanceHandle;\nexports.useLoader = index.useLoader;\nexports.useStore = index.useStore;\nexports.useThree = index.useThree;\nexports.Canvas = Canvas;\nexports.events = createPointerEvents;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./react-three-fiber.cjs.dev.js */ \"(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.dev.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL2Rpc3QvcmVhY3QtdGhyZWUtZmliZXIuY2pzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx1SkFBMEQ7QUFDNUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL2Rpc3QvcmVhY3QtdGhyZWUtZmliZXIuY2pzLmpzPzVkMzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcmVhY3QtdGhyZWUtZmliZXIuY2pzLnByb2QuanNcIik7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3JlYWN0LXRocmVlLWZpYmVyLmNqcy5kZXYuanNcIik7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var enableSchedulerDebugging = false;\nvar enableProfiling = false;\nvar frameYieldMs = 5;\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  return heap.length === 0 ? null : heap[0];\n}\nfunction pop(heap) {\n  if (heap.length === 0) {\n    return null;\n  }\n\n  var first = heap[0];\n  var last = heap.pop();\n\n  if (last !== first) {\n    heap[0] = last;\n    siftDown(heap, last, 0);\n  }\n\n  return first;\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (index > 0) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n  var halfLength = length >>> 1;\n\n  while (index < halfLength) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\n\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  var localPerformance = performance;\n\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date;\n  var initialTime = localDate.now();\n\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\nvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\nvar localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nvar isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nvar isMessageLoopRunning = false;\nvar scheduledHostCallback = null;\nvar taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\n\nvar frameInterval = frameYieldMs;\nvar startTime = -1;\n\nfunction shouldYieldToHost() {\n  var timeElapsed = exports.unstable_now() - startTime;\n\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  } // The main thread has been blocked for a non-negligible amount of time. We\n\n\n  return true;\n}\n\nfunction requestPaint() {\n\n}\n\nfunction forceFrameRate(fps) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n    return;\n  }\n\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nvar performWorkUntilDeadline = function () {\n  if (scheduledHostCallback !== null) {\n    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n\n    startTime = currentTime;\n    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n    var hasMoreWork = true;\n\n    try {\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  } // Yielding to the browser will give it a chance to paint, so we can\n};\n\nvar schedulePerformWorkUntilDeadline;\n\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = function () {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  schedulePerformWorkUntilDeadline = function () {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = function () {\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms) {\n  taskTimeoutID = localSetTimeout(function () {\n    callback(exports.unstable_now());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = -1;\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling =  null;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_forceFrameRate = forceFrameRate;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_shouldYield = shouldYieldToHost;\nexports.unstable_wrapCallback = unstable_wrapCallback;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/scheduler/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLHlLQUEwRDtBQUM1RCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUvZmliZXIvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcz9iMjVlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/Controllers.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/Controllers.cjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nconst fiber = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.js\");\nconst XR = __webpack_require__(/*! ./XR.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XR.cjs\");\nconst XRControllerModelFactory = __webpack_require__(/*! ./XRControllerModelFactory.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XRControllerModelFactory.cjs\");\nconst XRControllerModel = __webpack_require__(/*! ./XRControllerModel.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XRControllerModel.cjs\");\nconst utils = __webpack_require__(/*! ./utils.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/utils.cjs\");\nfunction _interopNamespace(e) {\n  if (e && e.__esModule)\n    return e;\n  const n = Object.create(null, { [Symbol.toStringTag]: { value: \"Module\" } });\n  if (e) {\n    for (const k in e) {\n      if (k !== \"default\") {\n        const d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: () => e[k]\n        });\n      }\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nconst React__namespace = /* @__PURE__ */ _interopNamespace(React);\nconst THREE__namespace = /* @__PURE__ */ _interopNamespace(THREE);\nconst Ray = React__namespace.forwardRef(function Ray2({ target, hideOnBlur = false, ...props }, forwardedRef) {\n  const hoverState = XR.useXR((state) => state.hoverState);\n  const ray = React__namespace.useRef(null);\n  const rayGeometry = React__namespace.useMemo(\n    () => new THREE__namespace.BufferGeometry().setFromPoints([new THREE__namespace.Vector3(0, 0, 0), new THREE__namespace.Vector3(0, 0, -1)]),\n    []\n  );\n  React__namespace.useImperativeHandle(forwardedRef, () => ray.current);\n  fiber.useFrame(() => {\n    if (!target.inputSource) {\n      return;\n    }\n    let rayLength = 1;\n    const intersection = hoverState[target.inputSource.handedness].values().next().value;\n    if (intersection && target.inputSource.handedness !== \"none\") {\n      rayLength = intersection.distance;\n      if (hideOnBlur)\n        ray.current.visible = false;\n    } else if (hideOnBlur) {\n      ray.current.visible = true;\n    }\n    const offset = -0.01;\n    ray.current.scale.z = rayLength + offset;\n  });\n  return /* @__PURE__ */ React__namespace.createElement(\"line\", {\n    ref: ray,\n    geometry: rayGeometry,\n    \"material-opacity\": 0.8,\n    \"material-transparent\": true,\n    ...props\n  });\n});\nconst modelFactory = new XRControllerModelFactory.XRControllerModelFactory();\nconst ControllerModel = ({\n  target,\n  envMap,\n  envMapIntensity\n}) => {\n  const xrControllerModelRef = React__namespace.useRef(null);\n  const setEnvironmentMapRef = utils.useCallbackRef((xrControllerModel) => {\n    if (envMap == null)\n      return;\n    xrControllerModel.setEnvironmentMap(envMap);\n  });\n  const clearEnvironmentMapRef = utils.useCallbackRef((xrControllerModel) => xrControllerModel.setEnvironmentMap(null));\n  const setEnvironmentMapIntensityRef = utils.useCallbackRef((xrControllerModel) => {\n    if (envMapIntensity == null)\n      return;\n    xrControllerModel.setEnvironmentMapIntensity(envMapIntensity);\n  });\n  const handleControllerModel = React__namespace.useCallback(\n    (xrControllerModel) => {\n      var _a, _b, _c;\n      xrControllerModelRef.current = xrControllerModel;\n      if (xrControllerModel) {\n        target.xrControllerModel = xrControllerModel;\n        if ((_a = target.inputSource) == null ? void 0 : _a.hand) {\n          return;\n        }\n        setEnvironmentMapRef.current(xrControllerModel);\n        setEnvironmentMapIntensityRef.current(xrControllerModel);\n        if (target.inputSource) {\n          modelFactory.initializeControllerModel(xrControllerModel, target.inputSource);\n        } else {\n          console.warn(\"no input source on XRController when handleControllerModel\");\n        }\n      } else {\n        if ((_b = target.inputSource) == null ? void 0 : _b.hand) {\n          return;\n        }\n        (_c = target.xrControllerModel) == null ? void 0 : _c.disconnect();\n        target.xrControllerModel = null;\n      }\n    },\n    [target, setEnvironmentMapIntensityRef, setEnvironmentMapRef]\n  );\n  React__namespace.useLayoutEffect(() => {\n    if (xrControllerModelRef.current) {\n      if (envMap) {\n        setEnvironmentMapRef.current(xrControllerModelRef.current);\n      } else {\n        clearEnvironmentMapRef.current(xrControllerModelRef.current);\n      }\n    }\n  }, [envMap, setEnvironmentMapRef, clearEnvironmentMapRef]);\n  React__namespace.useLayoutEffect(() => {\n    if (xrControllerModelRef.current) {\n      setEnvironmentMapIntensityRef.current(xrControllerModelRef.current);\n    }\n  }, [envMapIntensity, setEnvironmentMapIntensityRef]);\n  return /* @__PURE__ */ React__namespace.createElement(\"xRControllerModel\", {\n    ref: handleControllerModel\n  });\n};\nfunction Controllers({ rayMaterial = {}, hideRaysOnBlur = false, envMap, envMapIntensity }) {\n  const controllers = XR.useXR((state) => state.controllers);\n  const isHandTracking = XR.useXR((state) => state.isHandTracking);\n  const rayMaterialProps = React__namespace.useMemo(\n    () => Object.entries(rayMaterial).reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [`material-${key}`]: value\n      }),\n      {}\n    ),\n    [JSON.stringify(rayMaterial)]\n  );\n  React__namespace.useMemo(() => fiber.extend({ XRControllerModel: XRControllerModel.XRControllerModel }), []);\n  return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, controllers.map((target, i) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, {\n    key: i\n  }, fiber.createPortal(/* @__PURE__ */ React__namespace.createElement(ControllerModel, {\n    target,\n    envMap,\n    envMapIntensity\n  }), target.grip), fiber.createPortal(\n    /* @__PURE__ */ React__namespace.createElement(Ray, {\n      visible: !isHandTracking,\n      hideOnBlur: hideRaysOnBlur,\n      target,\n      ...rayMaterialProps\n    }),\n    target.controller\n  ))));\n}\nexports.Controllers = Controllers;\nexports.Ray = Ray;\n//# sourceMappingURL=Controllers.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/Controllers.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/Hands.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/Hands.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst fiber = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.js\");\nconst OculusHandModel = __webpack_require__(/*! ./OculusHandModel.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/OculusHandModel.cjs\");\nconst XR = __webpack_require__(/*! ./XR.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XR.cjs\");\nconst utils = __webpack_require__(/*! ./utils.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/utils.cjs\");\nfunction _interopNamespace(e) {\n  if (e && e.__esModule)\n    return e;\n  const n = Object.create(null, { [Symbol.toStringTag]: { value: \"Module\" } });\n  if (e) {\n    for (const k in e) {\n      if (k !== \"default\") {\n        const d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: () => e[k]\n        });\n      }\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nconst React__namespace = /* @__PURE__ */ _interopNamespace(React);\nfunction Hands({ modelLeft, modelRight }) {\n  const controllers = XR.useXR((state) => state.controllers);\n  React__namespace.useMemo(() => fiber.extend({ OculusHandModel: OculusHandModel.OculusHandModel }), []);\n  utils.useIsomorphicLayoutEffect(() => {\n    for (const target of controllers) {\n      target.hand.dispatchEvent({ type: \"connected\", data: target.inputSource, fake: true });\n    }\n  }, [controllers, modelLeft, modelRight]);\n  return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, controllers.map(({ hand }) => fiber.createPortal(/* @__PURE__ */ React__namespace.createElement(\"oculusHandModel\", {\n    args: [hand, modelLeft, modelRight]\n  }), hand)));\n}\nexports.Hands = Hands;\n//# sourceMappingURL=Hands.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvSGFuZHMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsbUNBQW1DLGNBQWMsYUFBYSwwQkFBMEIsbUJBQW1CO0FBQzNHLGNBQWMsbUJBQU8sQ0FBQyx3R0FBTztBQUM3QixjQUFjLG1CQUFPLENBQUMsaUdBQW9CO0FBQzFDLHdCQUF3QixtQkFBTyxDQUFDLDRGQUF1QjtBQUN2RCxXQUFXLG1CQUFPLENBQUMsa0VBQVU7QUFDN0IsY0FBYyxtQkFBTyxDQUFDLHdFQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx3QkFBd0IsbUJBQW1CO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHVCQUF1QjtBQUN4QztBQUNBLGdEQUFnRCxrREFBa0Q7QUFDbEc7QUFDQTtBQUNBLGtDQUFrQyx5REFBeUQ7QUFDM0Y7QUFDQSxHQUFHO0FBQ0gsNEdBQTRHLE1BQU07QUFDbEg7QUFDQSxHQUFHO0FBQ0g7QUFDQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvSGFuZHMuY2pzPzQ5MWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCB7IF9fZXNNb2R1bGU6IHsgdmFsdWU6IHRydWUgfSwgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiTW9kdWxlXCIgfSB9KTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgZmliZXIgPSByZXF1aXJlKFwiQHJlYWN0LXRocmVlL2ZpYmVyXCIpO1xuY29uc3QgT2N1bHVzSGFuZE1vZGVsID0gcmVxdWlyZShcIi4vT2N1bHVzSGFuZE1vZGVsLmNqc1wiKTtcbmNvbnN0IFhSID0gcmVxdWlyZShcIi4vWFIuY2pzXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5janNcIik7XG5mdW5jdGlvbiBfaW50ZXJvcE5hbWVzcGFjZShlKSB7XG4gIGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICByZXR1cm4gZTtcbiAgY29uc3QgbiA9IE9iamVjdC5jcmVhdGUobnVsbCwgeyBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogXCJNb2R1bGVcIiB9IH0pO1xuICBpZiAoZSkge1xuICAgIGZvciAoY29uc3QgayBpbiBlKSB7XG4gICAgICBpZiAoayAhPT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgY29uc3QgZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgayk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBrLCBkLmdldCA/IGQgOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6ICgpID0+IGVba11cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG4uZGVmYXVsdCA9IGU7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKG4pO1xufVxuY29uc3QgUmVhY3RfX25hbWVzcGFjZSA9IC8qIEBfX1BVUkVfXyAqLyBfaW50ZXJvcE5hbWVzcGFjZShSZWFjdCk7XG5mdW5jdGlvbiBIYW5kcyh7IG1vZGVsTGVmdCwgbW9kZWxSaWdodCB9KSB7XG4gIGNvbnN0IGNvbnRyb2xsZXJzID0gWFIudXNlWFIoKHN0YXRlKSA9PiBzdGF0ZS5jb250cm9sbGVycyk7XG4gIFJlYWN0X19uYW1lc3BhY2UudXNlTWVtbygoKSA9PiBmaWJlci5leHRlbmQoeyBPY3VsdXNIYW5kTW9kZWw6IE9jdWx1c0hhbmRNb2RlbC5PY3VsdXNIYW5kTW9kZWwgfSksIFtdKTtcbiAgdXRpbHMudXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgZm9yIChjb25zdCB0YXJnZXQgb2YgY29udHJvbGxlcnMpIHtcbiAgICAgIHRhcmdldC5oYW5kLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiBcImNvbm5lY3RlZFwiLCBkYXRhOiB0YXJnZXQuaW5wdXRTb3VyY2UsIGZha2U6IHRydWUgfSk7XG4gICAgfVxuICB9LCBbY29udHJvbGxlcnMsIG1vZGVsTGVmdCwgbW9kZWxSaWdodF0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChSZWFjdF9fbmFtZXNwYWNlLkZyYWdtZW50LCBudWxsLCBjb250cm9sbGVycy5tYXAoKHsgaGFuZCB9KSA9PiBmaWJlci5jcmVhdGVQb3J0YWwoLyogQF9fUFVSRV9fICovIFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChcIm9jdWx1c0hhbmRNb2RlbFwiLCB7XG4gICAgYXJnczogW2hhbmQsIG1vZGVsTGVmdCwgbW9kZWxSaWdodF1cbiAgfSksIGhhbmQpKSk7XG59XG5leHBvcnRzLkhhbmRzID0gSGFuZHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IYW5kcy5janMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/Hands.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/Interactions.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/Interactions.cjs ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nconst fiber = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.js\");\nconst XR = __webpack_require__(/*! ./XR.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XR.cjs\");\nconst XREvents = __webpack_require__(/*! ./XREvents.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XREvents.cjs\");\nconst utils = __webpack_require__(/*! ./utils.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/utils.cjs\");\nfunction _interopNamespace(e) {\n  if (e && e.__esModule)\n    return e;\n  const n = Object.create(null, { [Symbol.toStringTag]: { value: \"Module\" } });\n  if (e) {\n    for (const k in e) {\n      if (k !== \"default\") {\n        const d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: () => e[k]\n        });\n      }\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nconst React__namespace = /* @__PURE__ */ _interopNamespace(React);\nconst THREE__namespace = /* @__PURE__ */ _interopNamespace(THREE);\nconst tempMatrix = new THREE__namespace.Matrix4();\nfunction InteractionManager({ children }) {\n  const events = fiber.useThree((state) => state.events);\n  const get = fiber.useThree((state) => state.get);\n  const raycaster = fiber.useThree((state) => state.raycaster);\n  const controllers = XR.useXR((state) => state.controllers);\n  const interactions = XR.useXR((state) => state.interactions);\n  const hoverState = XR.useXR((state) => state.hoverState);\n  const hasInteraction = XR.useXR((state) => state.hasInteraction);\n  const getInteraction = XR.useXR((state) => state.getInteraction);\n  const intersect = React__namespace.useCallback(\n    (controller) => {\n      const objects = Array.from(interactions.keys());\n      tempMatrix.identity().extractRotation(controller.matrixWorld);\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n      return raycaster.intersectObjects(objects, true);\n    },\n    [interactions, raycaster]\n  );\n  fiber.useFrame(() => {\n    var _a;\n    if (interactions.size === 0)\n      return;\n    for (const target of controllers) {\n      if (!((_a = target.inputSource) == null ? void 0 : _a.handedness)) {\n        return;\n      }\n      const hovering = hoverState[target.inputSource.handedness];\n      const hits = /* @__PURE__ */ new Set();\n      let intersections = intersect(target.controller);\n      if (events.filter) {\n        intersections = events.filter(intersections, get());\n      } else {\n        const hit = intersections.find((i) => i == null ? void 0 : i.object);\n        if (hit)\n          intersections = [hit];\n      }\n      for (const intersection of intersections) {\n        let eventObject = intersection.object;\n        while (eventObject) {\n          if (hasInteraction(eventObject, \"onHover\") && !hovering.has(eventObject)) {\n            const handlers = getInteraction(eventObject, \"onHover\");\n            for (const handler of handlers) {\n              handler({ target, intersection, intersections });\n            }\n          }\n          const moveHandlers = getInteraction(eventObject, \"onMove\");\n          moveHandlers == null ? void 0 : moveHandlers.forEach((handler) => handler({ target, intersection, intersections }));\n          hovering.set(eventObject, intersection);\n          hits.add(eventObject.id);\n          eventObject = eventObject.parent;\n        }\n      }\n      for (const eventObject of hovering.keys()) {\n        if (!hits.has(eventObject.id)) {\n          hovering.delete(eventObject);\n          const handlers = getInteraction(eventObject, \"onBlur\");\n          if (!handlers)\n            continue;\n          for (const handler of handlers) {\n            handler({ target, intersections });\n          }\n        }\n      }\n    }\n  });\n  const triggerEvent = React__namespace.useCallback(\n    (interaction) => (e) => {\n      var _a;\n      if (!((_a = e.target.inputSource) == null ? void 0 : _a.handedness)) {\n        return;\n      }\n      const hovering = hoverState[e.target.inputSource.handedness];\n      const intersections = Array.from(new Set(hovering.values()));\n      interactions.forEach((handlers, object) => {\n        var _a2, _b, _c;\n        if (hovering.has(object)) {\n          if (!handlers[interaction])\n            return;\n          for (const handler of handlers[interaction]) {\n            (_a2 = handler.current) == null ? void 0 : _a2.call(handler, { target: e.target, intersection: hovering.get(object), intersections });\n          }\n        } else {\n          if (interaction === \"onSelect\" && handlers[\"onSelectMissed\"]) {\n            for (const handler of handlers[\"onSelectMissed\"]) {\n              (_b = handler.current) == null ? void 0 : _b.call(handler, { target: e.target, intersections });\n            }\n          } else if (interaction === \"onSqueeze\" && handlers[\"onSqueezeMissed\"]) {\n            for (const handler of handlers[\"onSqueezeMissed\"]) {\n              (_c = handler.current) == null ? void 0 : _c.call(handler, { target: e.target, intersections });\n            }\n          }\n        }\n      });\n    },\n    [hoverState, interactions]\n  );\n  XREvents.useXREvent(\"select\", triggerEvent(\"onSelect\"));\n  XREvents.useXREvent(\"selectstart\", triggerEvent(\"onSelectStart\"));\n  XREvents.useXREvent(\"selectend\", triggerEvent(\"onSelectEnd\"));\n  XREvents.useXREvent(\"squeeze\", triggerEvent(\"onSqueeze\"));\n  XREvents.useXREvent(\"squeezeend\", triggerEvent(\"onSqueezeEnd\"));\n  XREvents.useXREvent(\"squeezestart\", triggerEvent(\"onSqueezeStart\"));\n  return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, children);\n}\nfunction useInteraction(ref, type, handler) {\n  const addInteraction = XR.useXR((state) => state.addInteraction);\n  const removeInteraction = XR.useXR((state) => state.removeInteraction);\n  const handlerRef = utils.useCallbackRef(handler);\n  utils.useIsomorphicLayoutEffect(() => {\n    const target = ref.current;\n    if (!target || !handlerRef.current)\n      return;\n    addInteraction(target, type, handlerRef);\n    return () => removeInteraction(target, type, handlerRef);\n  }, [ref, type, addInteraction, removeInteraction]);\n}\nconst Interactive = React__namespace.forwardRef(function Interactive2({\n  onHover,\n  onBlur,\n  onSelectStart,\n  onSelectEnd,\n  onSelectMissed,\n  onSelect,\n  onSqueezeStart,\n  onSqueezeEnd,\n  onSqueezeMissed,\n  onSqueeze,\n  onMove,\n  children\n}, passedRef) {\n  const ref = React__namespace.useRef(null);\n  React__namespace.useImperativeHandle(passedRef, () => ref.current);\n  useInteraction(ref, \"onHover\", onHover);\n  useInteraction(ref, \"onBlur\", onBlur);\n  useInteraction(ref, \"onSelectStart\", onSelectStart);\n  useInteraction(ref, \"onSelectEnd\", onSelectEnd);\n  useInteraction(ref, \"onSelectMissed\", onSelectMissed);\n  useInteraction(ref, \"onSelect\", onSelect);\n  useInteraction(ref, \"onSqueezeStart\", onSqueezeStart);\n  useInteraction(ref, \"onSqueezeEnd\", onSqueezeEnd);\n  useInteraction(ref, \"onSqueezeMissed\", onSqueezeMissed);\n  useInteraction(ref, \"onSqueeze\", onSqueeze);\n  useInteraction(ref, \"onMove\", onMove);\n  return /* @__PURE__ */ React__namespace.createElement(\"group\", {\n    ref\n  }, children);\n});\nconst RayGrab = React__namespace.forwardRef(function RayGrab2({ onSelectStart, onSelectEnd, children, ...rest }, forwardedRef) {\n  const grabbingController = React__namespace.useRef();\n  const groupRef = React__namespace.useRef(null);\n  const previousTransform = React__namespace.useMemo(() => new THREE__namespace.Matrix4(), []);\n  React__namespace.useImperativeHandle(forwardedRef, () => groupRef.current);\n  fiber.useFrame(() => {\n    const controller = grabbingController.current;\n    const group = groupRef.current;\n    if (!controller)\n      return;\n    group.applyMatrix4(previousTransform);\n    group.applyMatrix4(controller.matrixWorld);\n    group.updateMatrixWorld();\n    previousTransform.copy(controller.matrixWorld).invert();\n  });\n  return /* @__PURE__ */ React__namespace.createElement(Interactive, {\n    ref: groupRef,\n    onSelectStart: (e) => {\n      grabbingController.current = e.target.controller;\n      previousTransform.copy(e.target.controller.matrixWorld).invert();\n      onSelectStart == null ? void 0 : onSelectStart(e);\n    },\n    onSelectEnd: (e) => {\n      if (e.target.controller === grabbingController.current) {\n        grabbingController.current = void 0;\n      }\n      onSelectEnd == null ? void 0 : onSelectEnd(e);\n    },\n    ...rest\n  }, children);\n});\nfunction useHitTest(hitTestCallback) {\n  const session = XR.useXR((state) => state.session);\n  const hitTestSource = React__namespace.useRef();\n  const hitMatrix = React__namespace.useMemo(() => new THREE__namespace.Matrix4(), []);\n  utils.useIsomorphicLayoutEffect(() => {\n    if (!session)\n      return void (hitTestSource.current = void 0);\n    session.requestReferenceSpace(\"viewer\").then(async (referenceSpace) => {\n      var _a;\n      hitTestSource.current = await ((_a = session == null ? void 0 : session.requestHitTestSource) == null ? void 0 : _a.call(session, { space: referenceSpace }));\n    });\n  }, [session]);\n  fiber.useFrame((state, _, frame) => {\n    if (!frame || !hitTestSource.current)\n      return;\n    const [hit] = frame.getHitTestResults(hitTestSource.current);\n    if (hit) {\n      const referenceSpace = state.gl.xr.getReferenceSpace();\n      const pose = hit.getPose(referenceSpace);\n      if (pose) {\n        hitMatrix.fromArray(pose.transform.matrix);\n        hitTestCallback(hitMatrix, hit);\n      }\n    }\n  });\n}\nexports.InteractionManager = InteractionManager;\nexports.Interactive = Interactive;\nexports.RayGrab = RayGrab;\nexports.useHitTest = useHitTest;\nexports.useInteraction = useInteraction;\n//# sourceMappingURL=Interactions.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/Interactions.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/OculusHandModel.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/OculusHandModel.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nconst XRHandMeshModel = __webpack_require__(/*! ./XRHandMeshModel.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XRHandMeshModel.cjs\");\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = \"index-finger-tip\";\nclass OculusHandModel extends THREE.Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n    this._onConnected = (event) => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel.XRHandMeshModel(\n          this,\n          this.controller,\n          void 0,\n          xrInputSource.handedness,\n          xrInputSource.handedness === \"left\" ? this.leftModelPath : this.rightModelPath\n        );\n      }\n    };\n    this._onDisconnected = () => {\n      var _a;\n      if (!((_a = this.xrInputSource) == null ? void 0 : _a.hand)) {\n        return;\n      }\n      this.motionControllerCleanup();\n    };\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.leftModelPath = leftModelPath;\n    this.rightModelPath = rightModelPath;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener(\"connected\", this._onConnected);\n    controller.addEventListener(\"disconnected\", this._onDisconnected);\n  }\n  motionControllerCleanup() {\n    var _a;\n    this.clear();\n    (_a = this.motionController) == null ? void 0 : _a.dispose();\n    this.motionController = null;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n    if (pointerPosition) {\n      const indexSphere = new THREE.Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new THREE.Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n  dispose() {\n    this.motionControllerCleanup();\n    this.controller.removeEventListener(\"connected\", this._onConnected);\n    this.controller.removeEventListener(\"disconnected\", this._onDisconnected);\n  }\n}\nexports.OculusHandModel = OculusHandModel;\n//# sourceMappingURL=OculusHandModel.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvT2N1bHVzSGFuZE1vZGVsLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLG1DQUFtQyxjQUFjLGFBQWEsMEJBQTBCLG1CQUFtQjtBQUMzRyxjQUFjLG1CQUFPLENBQUMseURBQU87QUFDN0Isd0JBQXdCLG1CQUFPLENBQUMsNEZBQXVCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUveHIvZGlzdC9PY3VsdXNIYW5kTW9kZWwuY2pzP2ZiZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCB7IF9fZXNNb2R1bGU6IHsgdmFsdWU6IHRydWUgfSwgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiTW9kdWxlXCIgfSB9KTtcbmNvbnN0IFRIUkVFID0gcmVxdWlyZShcInRocmVlXCIpO1xuY29uc3QgWFJIYW5kTWVzaE1vZGVsID0gcmVxdWlyZShcIi4vWFJIYW5kTWVzaE1vZGVsLmNqc1wiKTtcbmNvbnN0IFRPVUNIX1JBRElVUyA9IDAuMDE7XG5jb25zdCBQT0lOVElOR19KT0lOVCA9IFwiaW5kZXgtZmluZ2VyLXRpcFwiO1xuY2xhc3MgT2N1bHVzSGFuZE1vZGVsIGV4dGVuZHMgVEhSRUUuT2JqZWN0M0Qge1xuICBjb25zdHJ1Y3Rvcihjb250cm9sbGVyLCBsZWZ0TW9kZWxQYXRoLCByaWdodE1vZGVsUGF0aCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fb25Db25uZWN0ZWQgPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHhySW5wdXRTb3VyY2UgPSBldmVudC5kYXRhO1xuICAgICAgaWYgKHhySW5wdXRTb3VyY2UuaGFuZCAmJiAhdGhpcy5tb3Rpb25Db250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMueHJJbnB1dFNvdXJjZSA9IHhySW5wdXRTb3VyY2U7XG4gICAgICAgIHRoaXMubW90aW9uQ29udHJvbGxlciA9IG5ldyBYUkhhbmRNZXNoTW9kZWwuWFJIYW5kTWVzaE1vZGVsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdGhpcy5jb250cm9sbGVyLFxuICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICB4cklucHV0U291cmNlLmhhbmRlZG5lc3MsXG4gICAgICAgICAgeHJJbnB1dFNvdXJjZS5oYW5kZWRuZXNzID09PSBcImxlZnRcIiA/IHRoaXMubGVmdE1vZGVsUGF0aCA6IHRoaXMucmlnaHRNb2RlbFBhdGhcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX29uRGlzY29ubmVjdGVkID0gKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgaWYgKCEoKF9hID0gdGhpcy54cklucHV0U291cmNlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuaGFuZCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5tb3Rpb25Db250cm9sbGVyQ2xlYW51cCgpO1xuICAgIH07XG4gICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICB0aGlzLm1vdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHRoaXMuZW52TWFwID0gbnVsbDtcbiAgICB0aGlzLmxlZnRNb2RlbFBhdGggPSBsZWZ0TW9kZWxQYXRoO1xuICAgIHRoaXMucmlnaHRNb2RlbFBhdGggPSByaWdodE1vZGVsUGF0aDtcbiAgICB0aGlzLm1lc2ggPSBudWxsO1xuICAgIHRoaXMueHJJbnB1dFNvdXJjZSA9IG51bGw7XG4gICAgY29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKFwiY29ubmVjdGVkXCIsIHRoaXMuX29uQ29ubmVjdGVkKTtcbiAgICBjb250cm9sbGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJkaXNjb25uZWN0ZWRcIiwgdGhpcy5fb25EaXNjb25uZWN0ZWQpO1xuICB9XG4gIG1vdGlvbkNvbnRyb2xsZXJDbGVhbnVwKCkge1xuICAgIHZhciBfYTtcbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgKF9hID0gdGhpcy5tb3Rpb25Db250cm9sbGVyKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZGlzcG9zZSgpO1xuICAgIHRoaXMubW90aW9uQ29udHJvbGxlciA9IG51bGw7XG4gIH1cbiAgdXBkYXRlTWF0cml4V29ybGQoZm9yY2UpIHtcbiAgICBzdXBlci51cGRhdGVNYXRyaXhXb3JsZChmb3JjZSk7XG4gICAgaWYgKHRoaXMubW90aW9uQ29udHJvbGxlcikge1xuICAgICAgdGhpcy5tb3Rpb25Db250cm9sbGVyLnVwZGF0ZU1lc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0UG9pbnRlclBvc2l0aW9uKCkge1xuICAgIGNvbnN0IGluZGV4RmluZ2VyVGlwID0gdGhpcy5jb250cm9sbGVyLmpvaW50c1tQT0lOVElOR19KT0lOVF07XG4gICAgaWYgKGluZGV4RmluZ2VyVGlwKSB7XG4gICAgICByZXR1cm4gaW5kZXhGaW5nZXJUaXAucG9zaXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBpbnRlcnNlY3RCb3hPYmplY3QoYm94T2JqZWN0KSB7XG4gICAgY29uc3QgcG9pbnRlclBvc2l0aW9uID0gdGhpcy5nZXRQb2ludGVyUG9zaXRpb24oKTtcbiAgICBpZiAocG9pbnRlclBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBpbmRleFNwaGVyZSA9IG5ldyBUSFJFRS5TcGhlcmUocG9pbnRlclBvc2l0aW9uLCBUT1VDSF9SQURJVVMpO1xuICAgICAgY29uc3QgYm94ID0gbmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tT2JqZWN0KGJveE9iamVjdCk7XG4gICAgICByZXR1cm4gaW5kZXhTcGhlcmUuaW50ZXJzZWN0c0JveChib3gpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGNoZWNrQnV0dG9uKGJ1dHRvbikge1xuICAgIGlmICh0aGlzLmludGVyc2VjdEJveE9iamVjdChidXR0b24pKSB7XG4gICAgICBidXR0b24ub25QcmVzcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBidXR0b24ub25DbGVhcigpO1xuICAgIH1cbiAgICBpZiAoYnV0dG9uLmlzUHJlc3NlZCgpKSB7XG4gICAgICBidXR0b24ud2hpbGVQcmVzc2VkKCk7XG4gICAgfVxuICB9XG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5tb3Rpb25Db250cm9sbGVyQ2xlYW51cCgpO1xuICAgIHRoaXMuY29udHJvbGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29ubmVjdGVkXCIsIHRoaXMuX29uQ29ubmVjdGVkKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpc2Nvbm5lY3RlZFwiLCB0aGlzLl9vbkRpc2Nvbm5lY3RlZCk7XG4gIH1cbn1cbmV4cG9ydHMuT2N1bHVzSGFuZE1vZGVsID0gT2N1bHVzSGFuZE1vZGVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2N1bHVzSGFuZE1vZGVsLmNqcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/OculusHandModel.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/Teleportation.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/Teleportation.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst fiber = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.js\");\nconst Interactions = __webpack_require__(/*! ./Interactions.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/Interactions.cjs\");\nfunction _interopNamespace(e) {\n  if (e && e.__esModule)\n    return e;\n  const n = Object.create(null, { [Symbol.toStringTag]: { value: \"Module\" } });\n  if (e) {\n    for (const k in e) {\n      if (k !== \"default\") {\n        const d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: () => e[k]\n        });\n      }\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nconst THREE__namespace = /* @__PURE__ */ _interopNamespace(THREE);\nconst React__namespace = /* @__PURE__ */ _interopNamespace(React);\nconst _q = /* @__PURE__ */ new THREE__namespace.Quaternion();\nfunction useTeleportation() {\n  const frame = React__namespace.useRef();\n  const baseReferenceSpace = React__namespace.useRef(null);\n  const teleportReferenceSpace = React__namespace.useRef(null);\n  fiber.useFrame((state, _, xrFrame) => {\n    var _a;\n    frame.current = xrFrame;\n    const referenceSpace = state.gl.xr.getReferenceSpace();\n    (_a = baseReferenceSpace.current) != null ? _a : baseReferenceSpace.current = referenceSpace;\n    const teleportOffset = teleportReferenceSpace.current;\n    if (teleportOffset && referenceSpace !== teleportOffset) {\n      state.gl.xr.setReferenceSpace(teleportOffset);\n    }\n  });\n  return React__namespace.useCallback((target) => {\n    var _a;\n    const base = baseReferenceSpace.current;\n    if (base) {\n      const [x, y, z] = Array.from(target);\n      const offsetFromBase = { x: -x, y: -y, z: -z };\n      const pose = (_a = frame.current) == null ? void 0 : _a.getViewerPose(base);\n      if (pose) {\n        offsetFromBase.x += pose.transform.position.x;\n        offsetFromBase.z += pose.transform.position.z;\n      }\n      const teleportOffset = new XRRigidTransform(offsetFromBase, _q);\n      teleportReferenceSpace.current = base.getOffsetReferenceSpace(teleportOffset);\n    }\n  }, []);\n}\nconst TeleportationPlane = React__namespace.forwardRef(function TeleportationPlane2({ leftHand = false, rightHand = false, maxDistance = 10, size = 0.25, ...props }, ref) {\n  const teleport = useTeleportation();\n  const marker = React__namespace.useRef(null);\n  const intersection = React__namespace.useRef();\n  const camera = fiber.useThree((state) => state.camera);\n  const isInteractive = React__namespace.useCallback(\n    (e) => {\n      var _a;\n      const handedness = (_a = e.target.inputSource) == null ? void 0 : _a.handedness;\n      return !!((handedness !== \"left\" || leftHand) && (handedness !== \"right\" || rightHand));\n    },\n    [leftHand, rightHand]\n  );\n  return /* @__PURE__ */ React__namespace.createElement(\"group\", {\n    ref,\n    ...props\n  }, /* @__PURE__ */ React__namespace.createElement(\"mesh\", {\n    ref: marker,\n    visible: false,\n    \"rotation-x\": -Math.PI / 2\n  }, /* @__PURE__ */ React__namespace.createElement(\"circleGeometry\", {\n    args: [size, 32]\n  }), /* @__PURE__ */ React__namespace.createElement(\"meshBasicMaterial\", {\n    color: \"white\"\n  })), /* @__PURE__ */ React__namespace.createElement(Interactions.Interactive, {\n    onMove: (e) => {\n      if (!isInteractive(e) || !e.intersection)\n        return;\n      const distanceFromCamera = e.intersection.point.distanceTo(camera.position);\n      marker.current.visible = distanceFromCamera <= maxDistance;\n      marker.current.scale.setScalar(1);\n      intersection.current = e.intersection.point;\n      marker.current.position.copy(intersection.current);\n    },\n    onHover: (e) => {\n      if (!isInteractive(e) || !e.intersection)\n        return;\n      const distanceFromCamera = e.intersection.point.distanceTo(camera.position);\n      marker.current.visible = distanceFromCamera <= maxDistance;\n      marker.current.scale.setScalar(1);\n    },\n    onBlur: (e) => {\n      if (!isInteractive(e))\n        return;\n      marker.current.visible = false;\n    },\n    onSelectStart: (e) => {\n      if (!isInteractive(e) || !e.intersection)\n        return;\n      const distanceFromCamera = e.intersection.point.distanceTo(camera.position);\n      marker.current.visible = distanceFromCamera <= maxDistance;\n      marker.current.scale.setScalar(1.1);\n    },\n    onSelectEnd: (e) => {\n      if (!isInteractive(e) || !intersection.current)\n        return;\n      marker.current.visible = true;\n      marker.current.scale.setScalar(1);\n      const distanceFromCamera = intersection.current.distanceTo(camera.position);\n      if (distanceFromCamera <= maxDistance) {\n        teleport(intersection.current);\n      }\n    }\n  }, /* @__PURE__ */ React__namespace.createElement(\"mesh\", {\n    \"rotation-x\": -Math.PI / 2,\n    visible: false,\n    scale: 1e3\n  }, /* @__PURE__ */ React__namespace.createElement(\"planeGeometry\", null))));\n});\nexports.TeleportationPlane = TeleportationPlane;\nexports.useTeleportation = useTeleportation;\n//# sourceMappingURL=Teleportation.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/Teleportation.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/XR.cjs":
/*!**************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/XR.cjs ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nconst create = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/zustand/esm/index.js\");\nconst fiber = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.cjs.js\");\nconst XRController = __webpack_require__(/*! ./XRController.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XRController.cjs\");\nconst Interactions = __webpack_require__(/*! ./Interactions.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/Interactions.cjs\");\nconst utils = __webpack_require__(/*! ./utils.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/utils.cjs\");\nconst context = __webpack_require__(/*! ./context.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/context.cjs\");\nconst _interopDefaultLegacy = (e) => e && typeof e === \"object\" && \"default\" in e ? e : { default: e };\nfunction _interopNamespace(e) {\n  if (e && e.__esModule)\n    return e;\n  const n = Object.create(null, { [Symbol.toStringTag]: { value: \"Module\" } });\n  if (e) {\n    for (const k in e) {\n      if (k !== \"default\") {\n        const d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: () => e[k]\n        });\n      }\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nconst React__namespace = /* @__PURE__ */ _interopNamespace(React);\nconst THREE__namespace = /* @__PURE__ */ _interopNamespace(THREE);\nconst create__default = /* @__PURE__ */ _interopDefaultLegacy(create);\nconst globalSessionStore = create__default.default((set, get) => ({ set, get, session: null, referenceSpaceType: null }));\nfunction XRManager({\n  foveation = 0,\n  frameRate = void 0,\n  referenceSpace = \"local-floor\",\n  onSessionStart,\n  onSessionEnd,\n  onVisibilityChange,\n  onInputSourcesChange,\n  children\n}) {\n  const gl = fiber.useThree((state) => state.gl);\n  const camera = fiber.useThree((state) => state.camera);\n  const player = useXR((state) => state.player);\n  const get = useXR((state) => state.get);\n  const set = useXR((state) => state.set);\n  const session = useXR((state) => state.session);\n  const controllers = useXR((state) => state.controllers);\n  const onSessionStartRef = utils.useCallbackRef(onSessionStart);\n  const onSessionEndRef = utils.useCallbackRef(onSessionEnd);\n  const onVisibilityChangeRef = utils.useCallbackRef(onVisibilityChange);\n  const onInputSourcesChangeRef = utils.useCallbackRef(onInputSourcesChange);\n  utils.useIsomorphicLayoutEffect(() => {\n    const handlers = [0, 1].map((id) => {\n      const target = new XRController.XRController(id, gl);\n      const onConnected = () => set((state) => ({ controllers: [...state.controllers, target] }));\n      const onDisconnected = () => set((state) => ({ controllers: state.controllers.filter((it) => it !== target) }));\n      target.addEventListener(\"connected\", onConnected);\n      target.addEventListener(\"disconnected\", onDisconnected);\n      return () => {\n        target.removeEventListener(\"connected\", onConnected);\n        target.removeEventListener(\"disconnected\", onDisconnected);\n      };\n    });\n    return () => handlers.forEach((cleanup) => cleanup());\n  }, [gl, set]);\n  utils.useIsomorphicLayoutEffect(() => globalSessionStore.subscribe(({ session: session2 }) => set(() => ({ session: session2 }))), [gl.xr, set]);\n  utils.useIsomorphicLayoutEffect(() => {\n    gl.xr.setFoveation(foveation);\n    set(() => ({ foveation }));\n  }, [gl.xr, foveation, set]);\n  utils.useIsomorphicLayoutEffect(() => {\n    var _a;\n    try {\n      if (frameRate)\n        (_a = session == null ? void 0 : session.updateTargetFrameRate) == null ? void 0 : _a.call(session, frameRate);\n    } catch (_) {\n    }\n    set(() => ({ frameRate }));\n  }, [session, frameRate, set]);\n  utils.useIsomorphicLayoutEffect(() => {\n    const globalSessionState = globalSessionStore.getState();\n    gl.xr.setReferenceSpaceType(referenceSpace);\n    set(() => ({ referenceSpace }));\n    globalSessionState.set({ referenceSpaceType: referenceSpace });\n  }, [gl.xr, referenceSpace, set]);\n  utils.useIsomorphicLayoutEffect(() => {\n    if (!session)\n      return void gl.xr.setSession(null);\n    const handleSessionStart = (nativeEvent) => {\n      var _a;\n      set(() => ({ isPresenting: true }));\n      (_a = onSessionStartRef.current) == null ? void 0 : _a.call(onSessionStartRef, { nativeEvent: { ...nativeEvent, target: session }, target: session });\n    };\n    const handleSessionEnd = (nativeEvent) => {\n      var _a;\n      set(() => ({ isPresenting: false, session: null }));\n      globalSessionStore.setState(() => ({ session: null }));\n      (_a = onSessionEndRef.current) == null ? void 0 : _a.call(onSessionEndRef, { nativeEvent: { ...nativeEvent, target: session }, target: session });\n    };\n    const handleVisibilityChange = (nativeEvent) => {\n      var _a;\n      (_a = onVisibilityChangeRef.current) == null ? void 0 : _a.call(onVisibilityChangeRef, { nativeEvent, target: session });\n    };\n    const handleInputSourcesChange = (nativeEvent) => {\n      var _a;\n      const isHandTracking = Object.values(session.inputSources).some((source) => source.hand);\n      set(() => ({ isHandTracking }));\n      (_a = onInputSourcesChangeRef.current) == null ? void 0 : _a.call(onInputSourcesChangeRef, { nativeEvent, target: session });\n    };\n    gl.xr.addEventListener(\"sessionstart\", handleSessionStart);\n    gl.xr.addEventListener(\"sessionend\", handleSessionEnd);\n    session.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    session.addEventListener(\"inputsourceschange\", handleInputSourcesChange);\n    gl.xr.setSession(session).then(() => {\n      gl.xr.setFoveation(get().foveation);\n    });\n    return () => {\n      gl.xr.removeEventListener(\"sessionstart\", handleSessionStart);\n      gl.xr.removeEventListener(\"sessionend\", handleSessionEnd);\n      session.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      session.removeEventListener(\"inputsourceschange\", handleInputSourcesChange);\n    };\n  }, [session, gl.xr, set, get]);\n  return /* @__PURE__ */ React__namespace.createElement(Interactions.InteractionManager, null, /* @__PURE__ */ React__namespace.createElement(\"primitive\", {\n    object: player\n  }, /* @__PURE__ */ React__namespace.createElement(\"primitive\", {\n    object: camera\n  }), controllers.map((controller) => /* @__PURE__ */ React__namespace.createElement(\"primitive\", {\n    key: controller.index,\n    object: controller\n  }))), children);\n}\nfunction XR(props) {\n  const store = React__namespace.useMemo(\n    () => create__default.default((set, get) => ({\n      set,\n      get,\n      controllers: [],\n      isPresenting: false,\n      isHandTracking: false,\n      player: new THREE__namespace.Group(),\n      session: null,\n      foveation: 0,\n      referenceSpace: \"local-floor\",\n      hoverState: {\n        left: /* @__PURE__ */ new Map(),\n        right: /* @__PURE__ */ new Map(),\n        none: /* @__PURE__ */ new Map()\n      },\n      interactions: /* @__PURE__ */ new Map(),\n      hasInteraction(object, eventType) {\n        var _a;\n        return !!((_a = get().interactions.get(object)) == null ? void 0 : _a[eventType].some((handlerRef) => handlerRef.current));\n      },\n      getInteraction(object, eventType) {\n        var _a;\n        return (_a = get().interactions.get(object)) == null ? void 0 : _a[eventType].reduce((result, handlerRef) => {\n          if (handlerRef.current) {\n            result.push(handlerRef.current);\n          }\n          return result;\n        }, []);\n      },\n      addInteraction(object, eventType, handlerRef) {\n        const interactions = get().interactions;\n        if (!interactions.has(object)) {\n          interactions.set(object, {\n            onHover: [],\n            onBlur: [],\n            onSelect: [],\n            onSelectEnd: [],\n            onSelectStart: [],\n            onSelectMissed: [],\n            onSqueeze: [],\n            onSqueezeEnd: [],\n            onSqueezeStart: [],\n            onSqueezeMissed: [],\n            onMove: []\n          });\n        }\n        const target = interactions.get(object);\n        target[eventType].push(handlerRef);\n      },\n      removeInteraction(object, eventType, handlerRef) {\n        const target = get().interactions.get(object);\n        if (target) {\n          const interactionIndex = target[eventType].indexOf(handlerRef);\n          if (interactionIndex !== -1)\n            target[eventType].splice(interactionIndex, 1);\n        }\n      }\n    })),\n    []\n  );\n  return /* @__PURE__ */ React__namespace.createElement(context.XRContext.Provider, {\n    value: store\n  }, /* @__PURE__ */ React__namespace.createElement(XRManager, {\n    ...props\n  }));\n}\nconst getSessionOptions = (globalStateReferenceSpaceType, sessionInit) => {\n  var _a;\n  if (!globalStateReferenceSpaceType && !sessionInit) {\n    return void 0;\n  }\n  if (globalStateReferenceSpaceType && !sessionInit) {\n    return { optionalFeatures: [globalStateReferenceSpaceType] };\n  }\n  if (globalStateReferenceSpaceType && sessionInit) {\n    return { ...sessionInit, optionalFeatures: utils.uniq([...(_a = sessionInit.optionalFeatures) != null ? _a : [], globalStateReferenceSpaceType]) };\n  }\n  return sessionInit;\n};\nconst startSession = async (sessionMode, sessionInit) => {\n  const xrState = globalSessionStore.getState();\n  if (xrState.session) {\n    console.warn(\"@react-three/xr: session already started, please stop it first\");\n    return;\n  }\n  const options = getSessionOptions(xrState.referenceSpaceType, sessionInit);\n  const session = await navigator.xr.requestSession(sessionMode, options);\n  xrState.set(() => ({ session }));\n  return session;\n};\nconst stopSession = async () => {\n  const xrState = globalSessionStore.getState();\n  if (!xrState.session) {\n    console.warn(\"@react-three/xr: no session to stop, please start it first\");\n    return;\n  }\n  await xrState.session.end();\n  xrState.set({ session: null });\n};\nconst toggleSession = async (sessionMode, { sessionInit, enterOnly, exitOnly } = {}) => {\n  const xrState = globalSessionStore.getState();\n  if (xrState.session && enterOnly)\n    return;\n  if (!xrState.session && exitOnly)\n    return;\n  if (xrState.session) {\n    return await stopSession();\n  } else {\n    return await startSession(sessionMode, sessionInit);\n  }\n};\nconst getLabel = (status, mode, reason) => {\n  switch (status) {\n    case \"entered\":\n      return `Exit ${mode}`;\n    case \"exited\":\n      return `Enter ${mode}`;\n    case \"unsupported\":\n    default:\n      switch (reason) {\n        case \"https\":\n          return \"HTTPS needed\";\n        case \"security\":\n          return `${mode} blocked`;\n        case \"unknown\":\n        default:\n          return `${mode} unsupported`;\n      }\n  }\n};\nconst XRButton = React__namespace.forwardRef(function XRButton2({ mode, sessionInit, enterOnly = false, exitOnly = false, onClick, onError, children, ...props }, ref) {\n  var _a;\n  const [status, setStatus] = React__namespace.useState(\"exited\");\n  const [reason, setReason] = React__namespace.useState(\"unknown\");\n  const label = getLabel(status, mode, reason);\n  const sessionMode = mode === \"inline\" ? mode : `immersive-${mode.toLowerCase()}`;\n  const onErrorRef = utils.useCallbackRef(onError);\n  utils.useIsomorphicLayoutEffect(() => {\n    if (!(navigator == null ? void 0 : navigator.xr))\n      return void setStatus(\"unsupported\");\n    navigator.xr.isSessionSupported(sessionMode).then((supported) => {\n      if (!supported) {\n        const isHttps = location.protocol === \"https:\";\n        setStatus(\"unsupported\");\n        setReason(isHttps ? \"unknown\" : \"https\");\n      } else {\n        setStatus(\"exited\");\n      }\n    }).catch((error) => {\n      setStatus(\"unsupported\");\n      if (\"name\" in error && error.name === \"SecurityError\") {\n        setReason(\"security\");\n      } else {\n        setReason(\"unknown\");\n      }\n    });\n  }, [sessionMode]);\n  utils.useIsomorphicLayoutEffect(\n    () => globalSessionStore.subscribe((state) => {\n      if (state.session) {\n        setStatus(\"entered\");\n      } else if (status !== \"unsupported\") {\n        setStatus(\"exited\");\n      }\n    }),\n    [status]\n  );\n  const handleButtonClick = React__namespace.useCallback(\n    async (event) => {\n      onClick == null ? void 0 : onClick(event);\n      try {\n        toggleSession(sessionMode, { sessionInit, enterOnly, exitOnly });\n      } catch (e) {\n        const onError2 = onErrorRef.current;\n        if (onError2 && e instanceof Error)\n          onError2(e);\n        else\n          throw e;\n      }\n    },\n    [onClick, sessionMode, sessionInit, enterOnly, exitOnly, onErrorRef]\n  );\n  return /* @__PURE__ */ React__namespace.createElement(\"button\", {\n    ...props,\n    ref,\n    onClick: status === \"unsupported\" ? onClick : handleButtonClick\n  }, (_a = typeof children === \"function\" ? children(status) : children) != null ? _a : label);\n});\nconst buttonStyles = {\n  position: \"absolute\",\n  bottom: \"24px\",\n  left: \"50%\",\n  transform: \"translateX(-50%)\",\n  padding: \"12px 24px\",\n  border: \"1px solid white\",\n  borderRadius: \"4px\",\n  background: \"rgba(0, 0, 0, 0.1)\",\n  color: \"white\",\n  font: \"normal 0.8125rem sans-serif\",\n  outline: \"none\",\n  zIndex: 99999,\n  cursor: \"pointer\"\n};\nconst ARButton = React__namespace.forwardRef(\n  ({\n    style = buttonStyles,\n    sessionInit = {\n      domOverlay: typeof document !== \"undefined\" ? { root: document.body } : void 0,\n      optionalFeatures: [\"hit-test\", \"dom-overlay\", \"dom-overlay-for-handheld-ar\"]\n    },\n    children,\n    ...rest\n  }, ref) => /* @__PURE__ */ React__namespace.createElement(XRButton, {\n    ...rest,\n    ref,\n    mode: \"AR\",\n    style,\n    sessionInit\n  }, children)\n);\nconst VRButton = React__namespace.forwardRef(\n  ({\n    style = buttonStyles,\n    sessionInit = { optionalFeatures: [\"local-floor\", \"bounded-floor\", \"hand-tracking\", \"layers\"] },\n    children,\n    ...rest\n  }, ref) => /* @__PURE__ */ React__namespace.createElement(XRButton, {\n    ...rest,\n    ref,\n    mode: \"VR\",\n    style,\n    sessionInit\n  }, children)\n);\nfunction useXR(selector = (state) => state, equalityFn) {\n  const store = React__namespace.useContext(context.XRContext);\n  if (!store)\n    throw new Error(\"useXR must be used within an <XR /> component!\");\n  return store(selector, equalityFn);\n}\nfunction useController(handedness) {\n  const controllers = useXR((state) => state.controllers);\n  const controller = React__namespace.useMemo(\n    () => controllers.find(({ inputSource }) => (inputSource == null ? void 0 : inputSource.handedness) && inputSource.handedness === handedness),\n    [handedness, controllers]\n  );\n  return controller;\n}\nexports.ARButton = ARButton;\nexports.VRButton = VRButton;\nexports.XR = XR;\nexports.XRButton = XRButton;\nexports.startSession = startSession;\nexports.stopSession = stopSession;\nexports.toggleSession = toggleSession;\nexports.useController = useController;\nexports.useXR = useXR;\n//# sourceMappingURL=XR.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/XR.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/XRController.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/XRController.cjs ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nfunction _interopNamespace(e) {\n  if (e && e.__esModule)\n    return e;\n  const n = Object.create(null, { [Symbol.toStringTag]: { value: \"Module\" } });\n  if (e) {\n    for (const k in e) {\n      if (k !== \"default\") {\n        const d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: () => e[k]\n        });\n      }\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nconst THREE__namespace = /* @__PURE__ */ _interopNamespace(THREE);\nclass XRController extends THREE__namespace.Group {\n  constructor(index, gl) {\n    super();\n    this.inputSource = null;\n    this.xrControllerModel = null;\n    this.index = index;\n    this.controller = gl.xr.getController(index);\n    this.grip = gl.xr.getControllerGrip(index);\n    this.hand = gl.xr.getHand(index);\n    this.grip.userData.name = \"grip\";\n    this.controller.userData.name = \"controller\";\n    this.hand.userData.name = \"hand\";\n    this.visible = false;\n    this.add(this.controller, this.grip, this.hand);\n    this._onConnected = this._onConnected.bind(this);\n    this._onDisconnected = this._onDisconnected.bind(this);\n    this.controller.addEventListener(\"connected\", this._onConnected);\n    this.controller.addEventListener(\"disconnected\", this._onDisconnected);\n  }\n  _onConnected(event) {\n    if (event.fake)\n      return;\n    if (!event.data)\n      return;\n    this.visible = true;\n    this.inputSource = event.data;\n    this.dispatchEvent(event);\n  }\n  _onDisconnected(event) {\n    if (event.fake)\n      return;\n    this.visible = false;\n    this.inputSource = null;\n    this.dispatchEvent(event);\n  }\n  dispose() {\n    this.controller.removeEventListener(\"connected\", this._onConnected);\n    this.controller.removeEventListener(\"disconnected\", this._onDisconnected);\n  }\n}\nexports.XRController = XRController;\n//# sourceMappingURL=XRController.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvWFJDb250cm9sbGVyLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLG1DQUFtQyxjQUFjLGFBQWEsMEJBQTBCLG1CQUFtQjtBQUMzRyxjQUFjLG1CQUFPLENBQUMseURBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHdCQUF3QixtQkFBbUI7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUveHIvZGlzdC9YUkNvbnRyb2xsZXIuY2pzPzBiN2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCB7IF9fZXNNb2R1bGU6IHsgdmFsdWU6IHRydWUgfSwgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiTW9kdWxlXCIgfSB9KTtcbmNvbnN0IFRIUkVFID0gcmVxdWlyZShcInRocmVlXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BOYW1lc3BhY2UoZSkge1xuICBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgcmV0dXJuIGU7XG4gIGNvbnN0IG4gPSBPYmplY3QuY3JlYXRlKG51bGwsIHsgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiTW9kdWxlXCIgfSB9KTtcbiAgaWYgKGUpIHtcbiAgICBmb3IgKGNvbnN0IGsgaW4gZSkge1xuICAgICAgaWYgKGsgIT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIGNvbnN0IGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIGspO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgaywgZC5nZXQgPyBkIDoge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiAoKSA9PiBlW2tdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBuLmRlZmF1bHQgPSBlO1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuKTtcbn1cbmNvbnN0IFRIUkVFX19uYW1lc3BhY2UgPSAvKiBAX19QVVJFX18gKi8gX2ludGVyb3BOYW1lc3BhY2UoVEhSRUUpO1xuY2xhc3MgWFJDb250cm9sbGVyIGV4dGVuZHMgVEhSRUVfX25hbWVzcGFjZS5Hcm91cCB7XG4gIGNvbnN0cnVjdG9yKGluZGV4LCBnbCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbnB1dFNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy54ckNvbnRyb2xsZXJNb2RlbCA9IG51bGw7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIHRoaXMuY29udHJvbGxlciA9IGdsLnhyLmdldENvbnRyb2xsZXIoaW5kZXgpO1xuICAgIHRoaXMuZ3JpcCA9IGdsLnhyLmdldENvbnRyb2xsZXJHcmlwKGluZGV4KTtcbiAgICB0aGlzLmhhbmQgPSBnbC54ci5nZXRIYW5kKGluZGV4KTtcbiAgICB0aGlzLmdyaXAudXNlckRhdGEubmFtZSA9IFwiZ3JpcFwiO1xuICAgIHRoaXMuY29udHJvbGxlci51c2VyRGF0YS5uYW1lID0gXCJjb250cm9sbGVyXCI7XG4gICAgdGhpcy5oYW5kLnVzZXJEYXRhLm5hbWUgPSBcImhhbmRcIjtcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLmFkZCh0aGlzLmNvbnRyb2xsZXIsIHRoaXMuZ3JpcCwgdGhpcy5oYW5kKTtcbiAgICB0aGlzLl9vbkNvbm5lY3RlZCA9IHRoaXMuX29uQ29ubmVjdGVkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25EaXNjb25uZWN0ZWQgPSB0aGlzLl9vbkRpc2Nvbm5lY3RlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKFwiY29ubmVjdGVkXCIsIHRoaXMuX29uQ29ubmVjdGVkKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRpc2Nvbm5lY3RlZFwiLCB0aGlzLl9vbkRpc2Nvbm5lY3RlZCk7XG4gIH1cbiAgX29uQ29ubmVjdGVkKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmZha2UpXG4gICAgICByZXR1cm47XG4gICAgaWYgKCFldmVudC5kYXRhKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5pbnB1dFNvdXJjZSA9IGV2ZW50LmRhdGE7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuICBfb25EaXNjb25uZWN0ZWQoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZmFrZSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLmlucHV0U291cmNlID0gbnVsbDtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb25uZWN0ZWRcIiwgdGhpcy5fb25Db25uZWN0ZWQpO1xuICAgIHRoaXMuY29udHJvbGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlzY29ubmVjdGVkXCIsIHRoaXMuX29uRGlzY29ubmVjdGVkKTtcbiAgfVxufVxuZXhwb3J0cy5YUkNvbnRyb2xsZXIgPSBYUkNvbnRyb2xsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1YUkNvbnRyb2xsZXIuY2pzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/XRController.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/XRControllerModel.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/XRControllerModel.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nconst threeStdlib = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/index.cjs\");\nconst isEnvMapApplicable = (material) => \"envMap\" in material;\nconst updateEnvMap = (material, envMap) => {\n  material.envMap = envMap;\n  material.needsUpdate = true;\n};\nconst applyEnvironmentMap = (envMap, obj) => {\n  if (obj instanceof THREE.Mesh) {\n    if (Array.isArray(obj.material)) {\n      obj.material.forEach((m) => isEnvMapApplicable(m) ? updateEnvMap(m, envMap) : void 0);\n    } else if (isEnvMapApplicable(obj.material)) {\n      updateEnvMap(obj.material, envMap);\n    }\n  }\n};\nconst isEnvMapIntensityApplicable = (material) => \"envMapIntensity\" in material;\nconst updateEnvMapIntensity = (material, envMapIntensity) => {\n  material.envMapIntensity = envMapIntensity;\n  material.needsUpdate = true;\n};\nconst applyEnvironmentMapIntensity = (envMapIntensity, obj) => {\n  if (obj instanceof THREE.Mesh) {\n    if (Array.isArray(obj.material)) {\n      obj.material.forEach((m) => isEnvMapIntensityApplicable(m) ? updateEnvMapIntensity(m, envMapIntensity) : void 0);\n    } else if (isEnvMapIntensityApplicable(obj.material)) {\n      updateEnvMapIntensity(obj.material, envMapIntensity);\n    }\n  }\n};\nfunction findNodes(motionController, scene) {\n  Object.values(motionController.components).forEach((component) => {\n    const { type, touchPointNodeName, visualResponses } = component;\n    if (type === threeStdlib.MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        const sphereGeometry = new THREE.SphereGeometry(1e-3);\n        const material = new THREE.MeshBasicMaterial({ color: 255 });\n        const sphere = new THREE.Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    }\n    Object.values(visualResponses).forEach((visualResponse) => {\n      const { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n      if (valueNodeProperty === threeStdlib.MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      }\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  findNodes(controllerModel.motionController, scene);\n  if (controllerModel.envMap || controllerModel.envMapIntensity != null) {\n    scene.traverse((c) => {\n      if (controllerModel.envMap)\n        applyEnvironmentMap(controllerModel.envMap, c);\n      if (controllerModel.envMapIntensity != null)\n        applyEnvironmentMapIntensity(controllerModel.envMapIntensity, c);\n    });\n  }\n  controllerModel.add(scene);\n}\nclass XRControllerModel extends THREE.Group {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n    this.envMapIntensity = 1;\n    this.scene = null;\n  }\n  setEnvironmentMap(envMap, envMapIntensity = 1) {\n    var _a;\n    if (this.envMap === envMap && this.envMapIntensity === envMapIntensity) {\n      return this;\n    }\n    this.envMap = envMap;\n    this.envMapIntensity = envMapIntensity;\n    (_a = this.scene) == null ? void 0 : _a.traverse((c) => {\n      applyEnvironmentMap(envMap, c);\n      applyEnvironmentMapIntensity(envMapIntensity, c);\n    });\n    return this;\n  }\n  setEnvironmentMapIntensity(envMapIntensity) {\n    var _a;\n    if (this.envMapIntensity === envMapIntensity) {\n      return this;\n    }\n    this.envMapIntensity = envMapIntensity;\n    (_a = this.scene) == null ? void 0 : _a.traverse((c) => applyEnvironmentMapIntensity(envMapIntensity, c));\n    return this;\n  }\n  connectModel(scene) {\n    if (!this.motionController) {\n      console.warn(\"scene tried to add, but no motion controller\");\n      return;\n    }\n    this.scene = scene;\n    addAssetSceneToControllerModel(this, scene);\n    this.dispatchEvent({\n      type: \"modelconnected\",\n      data: scene\n    });\n  }\n  connectMotionController(motionController) {\n    this.motionController = motionController;\n    this.dispatchEvent({\n      type: \"motionconnected\",\n      data: motionController\n    });\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController)\n      return;\n    this.motionController.updateFromGamepad();\n    Object.values(this.motionController.components).forEach((component) => {\n      Object.values(component.visualResponses).forEach((visualResponse) => {\n        const { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n        if (!valueNode)\n          return;\n        if (valueNodeProperty === threeStdlib.MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === \"boolean\") {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === threeStdlib.MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === \"number\") {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n  disconnect() {\n    this.dispatchEvent({\n      type: \"motiondisconnected\",\n      data: this.motionController\n    });\n    this.dispatchEvent({\n      type: \"modeldisconnected\",\n      data: this.scene\n    });\n    this.motionController = null;\n    if (this.scene) {\n      this.remove(this.scene);\n    }\n    this.scene = null;\n  }\n  dispose() {\n    this.disconnect();\n  }\n}\nexports.XRControllerModel = XRControllerModel;\n//# sourceMappingURL=XRControllerModel.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/XRControllerModel.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/XRControllerModelFactory.cjs":
/*!************************************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/XRControllerModelFactory.cjs ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst threeStdlib = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/index.cjs\");\nconst DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles\";\nconst DEFAULT_PROFILE = \"generic-trigger\";\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null, path = DEFAULT_PROFILES_PATH) {\n    this.gltfLoader = gltfLoader != null ? gltfLoader : new threeStdlib.GLTFLoader();\n    this.path = path;\n    this._assetCache = {};\n  }\n  initializeControllerModel(controllerModel, xrInputSource) {\n    if (xrInputSource.targetRayMode !== \"tracked-pointer\" || !xrInputSource.gamepad) {\n      return Promise.resolve();\n    }\n    return threeStdlib.fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({ profile, assetPath }) => {\n      if (!assetPath) {\n        throw new Error(\"no asset path\");\n      }\n      const motionController = new threeStdlib.MotionController(xrInputSource, profile, assetPath);\n      controllerModel.connectMotionController(motionController);\n      const assetUrl = motionController.assetUrl;\n      const cachedAsset = this._assetCache[assetUrl];\n      if (cachedAsset) {\n        const scene = cachedAsset.scene.clone();\n        controllerModel.connectModel(scene);\n      } else {\n        if (!this.gltfLoader) {\n          throw new Error(\"GLTFLoader not set.\");\n        }\n        this.gltfLoader.setPath(\"\");\n        this.gltfLoader.load(\n          assetUrl,\n          (asset) => {\n            if (!controllerModel.motionController) {\n              console.warn(\"motionController gone while gltf load, bailing...\");\n              return;\n            }\n            this._assetCache[assetUrl] = asset;\n            const scene = asset.scene.clone();\n            controllerModel.connectModel(scene);\n          },\n          void 0,\n          () => {\n            throw new Error(`Asset ${assetUrl} missing or malformed.`);\n          }\n        );\n      }\n    }).catch((err) => {\n      console.warn(err);\n    });\n  }\n}\nexports.XRControllerModelFactory = XRControllerModelFactory;\n//# sourceMappingURL=XRControllerModelFactory.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvWFJDb250cm9sbGVyTW9kZWxGYWN0b3J5LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLG1DQUFtQyxjQUFjLGFBQWEsMEJBQTBCLG1CQUFtQjtBQUMzRyxvQkFBb0IsbUJBQU8sQ0FBQyxpRUFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUYsb0JBQW9CO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLHFDQUFxQyxVQUFVO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS94ci9kaXN0L1hSQ29udHJvbGxlck1vZGVsRmFjdG9yeS5janM/ZmQzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGV4cG9ydHMsIHsgX19lc01vZHVsZTogeyB2YWx1ZTogdHJ1ZSB9LCBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogXCJNb2R1bGVcIiB9IH0pO1xuY29uc3QgdGhyZWVTdGRsaWIgPSByZXF1aXJlKFwidGhyZWUtc3RkbGliXCIpO1xuY29uc3QgREVGQVVMVF9QUk9GSUxFU19QQVRIID0gXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL0B3ZWJ4ci1pbnB1dC1wcm9maWxlcy9hc3NldHNAMS4wL2Rpc3QvcHJvZmlsZXNcIjtcbmNvbnN0IERFRkFVTFRfUFJPRklMRSA9IFwiZ2VuZXJpYy10cmlnZ2VyXCI7XG5jbGFzcyBYUkNvbnRyb2xsZXJNb2RlbEZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihnbHRmTG9hZGVyID0gbnVsbCwgcGF0aCA9IERFRkFVTFRfUFJPRklMRVNfUEFUSCkge1xuICAgIHRoaXMuZ2x0ZkxvYWRlciA9IGdsdGZMb2FkZXIgIT0gbnVsbCA/IGdsdGZMb2FkZXIgOiBuZXcgdGhyZWVTdGRsaWIuR0xURkxvYWRlcigpO1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgdGhpcy5fYXNzZXRDYWNoZSA9IHt9O1xuICB9XG4gIGluaXRpYWxpemVDb250cm9sbGVyTW9kZWwoY29udHJvbGxlck1vZGVsLCB4cklucHV0U291cmNlKSB7XG4gICAgaWYgKHhySW5wdXRTb3VyY2UudGFyZ2V0UmF5TW9kZSAhPT0gXCJ0cmFja2VkLXBvaW50ZXJcIiB8fCAheHJJbnB1dFNvdXJjZS5nYW1lcGFkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aHJlZVN0ZGxpYi5mZXRjaFByb2ZpbGUoeHJJbnB1dFNvdXJjZSwgdGhpcy5wYXRoLCBERUZBVUxUX1BST0ZJTEUpLnRoZW4oKHsgcHJvZmlsZSwgYXNzZXRQYXRoIH0pID0+IHtcbiAgICAgIGlmICghYXNzZXRQYXRoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vIGFzc2V0IHBhdGhcIik7XG4gICAgICB9XG4gICAgICBjb25zdCBtb3Rpb25Db250cm9sbGVyID0gbmV3IHRocmVlU3RkbGliLk1vdGlvbkNvbnRyb2xsZXIoeHJJbnB1dFNvdXJjZSwgcHJvZmlsZSwgYXNzZXRQYXRoKTtcbiAgICAgIGNvbnRyb2xsZXJNb2RlbC5jb25uZWN0TW90aW9uQ29udHJvbGxlcihtb3Rpb25Db250cm9sbGVyKTtcbiAgICAgIGNvbnN0IGFzc2V0VXJsID0gbW90aW9uQ29udHJvbGxlci5hc3NldFVybDtcbiAgICAgIGNvbnN0IGNhY2hlZEFzc2V0ID0gdGhpcy5fYXNzZXRDYWNoZVthc3NldFVybF07XG4gICAgICBpZiAoY2FjaGVkQXNzZXQpIHtcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBjYWNoZWRBc3NldC5zY2VuZS5jbG9uZSgpO1xuICAgICAgICBjb250cm9sbGVyTW9kZWwuY29ubmVjdE1vZGVsKHNjZW5lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5nbHRmTG9hZGVyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR0xURkxvYWRlciBub3Qgc2V0LlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdsdGZMb2FkZXIuc2V0UGF0aChcIlwiKTtcbiAgICAgICAgdGhpcy5nbHRmTG9hZGVyLmxvYWQoXG4gICAgICAgICAgYXNzZXRVcmwsXG4gICAgICAgICAgKGFzc2V0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNvbnRyb2xsZXJNb2RlbC5tb3Rpb25Db250cm9sbGVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIm1vdGlvbkNvbnRyb2xsZXIgZ29uZSB3aGlsZSBnbHRmIGxvYWQsIGJhaWxpbmcuLi5cIik7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2Fzc2V0Q2FjaGVbYXNzZXRVcmxdID0gYXNzZXQ7XG4gICAgICAgICAgICBjb25zdCBzY2VuZSA9IGFzc2V0LnNjZW5lLmNsb25lKCk7XG4gICAgICAgICAgICBjb250cm9sbGVyTW9kZWwuY29ubmVjdE1vZGVsKHNjZW5lKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFzc2V0ICR7YXNzZXRVcmx9IG1pc3Npbmcgb3IgbWFsZm9ybWVkLmApO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0cy5YUkNvbnRyb2xsZXJNb2RlbEZhY3RvcnkgPSBYUkNvbnRyb2xsZXJNb2RlbEZhY3Rvcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1YUkNvbnRyb2xsZXJNb2RlbEZhY3RvcnkuY2pzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/XRControllerModelFactory.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/XREvents.cjs":
/*!********************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/XREvents.cjs ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst XR = __webpack_require__(/*! ./XR.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XR.cjs\");\nconst utils = __webpack_require__(/*! ./utils.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/utils.cjs\");\nfunction useXREvent(event, handler, { handedness } = {}) {\n  const handlerRef = utils.useCallbackRef(handler);\n  const controllers = XR.useXR((state) => state.controllers);\n  utils.useIsomorphicLayoutEffect(() => {\n    const listeners = controllers.map((target) => {\n      if (handedness && target.inputSource && target.inputSource.handedness !== handedness)\n        return;\n      const listener = (nativeEvent) => handlerRef.current({ nativeEvent, target });\n      target.controller.addEventListener(event, listener);\n      return () => target.controller.removeEventListener(event, listener);\n    });\n    return () => listeners.forEach((cleanup) => cleanup == null ? void 0 : cleanup());\n  }, [controllers, handedness, event]);\n}\nexports.useXREvent = useXREvent;\n//# sourceMappingURL=XREvents.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvWFJFdmVudHMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsbUNBQW1DLGNBQWMsYUFBYSwwQkFBMEIsbUJBQW1CO0FBQzNHLFdBQVcsbUJBQU8sQ0FBQyxrRUFBVTtBQUM3QixjQUFjLG1CQUFPLENBQUMsd0VBQWE7QUFDbkMsc0NBQXNDLGFBQWEsSUFBSTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQscUJBQXFCO0FBQ2xGO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvWFJFdmVudHMuY2pzPzFjMmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCB7IF9fZXNNb2R1bGU6IHsgdmFsdWU6IHRydWUgfSwgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiTW9kdWxlXCIgfSB9KTtcbmNvbnN0IFhSID0gcmVxdWlyZShcIi4vWFIuY2pzXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5janNcIik7XG5mdW5jdGlvbiB1c2VYUkV2ZW50KGV2ZW50LCBoYW5kbGVyLCB7IGhhbmRlZG5lc3MgfSA9IHt9KSB7XG4gIGNvbnN0IGhhbmRsZXJSZWYgPSB1dGlscy51c2VDYWxsYmFja1JlZihoYW5kbGVyKTtcbiAgY29uc3QgY29udHJvbGxlcnMgPSBYUi51c2VYUigoc3RhdGUpID0+IHN0YXRlLmNvbnRyb2xsZXJzKTtcbiAgdXRpbHMudXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gY29udHJvbGxlcnMubWFwKCh0YXJnZXQpID0+IHtcbiAgICAgIGlmIChoYW5kZWRuZXNzICYmIHRhcmdldC5pbnB1dFNvdXJjZSAmJiB0YXJnZXQuaW5wdXRTb3VyY2UuaGFuZGVkbmVzcyAhPT0gaGFuZGVkbmVzcylcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSAobmF0aXZlRXZlbnQpID0+IGhhbmRsZXJSZWYuY3VycmVudCh7IG5hdGl2ZUV2ZW50LCB0YXJnZXQgfSk7XG4gICAgICB0YXJnZXQuY29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gKCkgPT4gdGFyZ2V0LmNvbnRyb2xsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lcnMuZm9yRWFjaCgoY2xlYW51cCkgPT4gY2xlYW51cCA9PSBudWxsID8gdm9pZCAwIDogY2xlYW51cCgpKTtcbiAgfSwgW2NvbnRyb2xsZXJzLCBoYW5kZWRuZXNzLCBldmVudF0pO1xufVxuZXhwb3J0cy51c2VYUkV2ZW50ID0gdXNlWFJFdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVhSRXZlbnRzLmNqcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/XREvents.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/XRHandMeshModel.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/XRHandMeshModel.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst threeStdlib = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/index.cjs\");\nconst DEFAULT_HAND_PROFILE_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/\";\nclass XRHandMeshModel {\n  constructor(handModel, controller, path = DEFAULT_HAND_PROFILE_PATH, handedness, customModelPath) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new threeStdlib.GLTFLoader();\n    if (!customModelPath)\n      loader.setPath(path);\n    loader.load(customModelPath != null ? customModelPath : `${handedness}.glb`, (gltf) => {\n      const object = gltf.scene.children[0];\n      this.handModel.add(object);\n      this.scene = object;\n      const mesh = object.getObjectByProperty(\"type\", \"SkinnedMesh\");\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const joints = [\n        \"wrist\",\n        \"thumb-metacarpal\",\n        \"thumb-phalanx-proximal\",\n        \"thumb-phalanx-distal\",\n        \"thumb-tip\",\n        \"index-finger-metacarpal\",\n        \"index-finger-phalanx-proximal\",\n        \"index-finger-phalanx-intermediate\",\n        \"index-finger-phalanx-distal\",\n        \"index-finger-tip\",\n        \"middle-finger-metacarpal\",\n        \"middle-finger-phalanx-proximal\",\n        \"middle-finger-phalanx-intermediate\",\n        \"middle-finger-phalanx-distal\",\n        \"middle-finger-tip\",\n        \"ring-finger-metacarpal\",\n        \"ring-finger-phalanx-proximal\",\n        \"ring-finger-phalanx-intermediate\",\n        \"ring-finger-phalanx-distal\",\n        \"ring-finger-tip\",\n        \"pinky-finger-metacarpal\",\n        \"pinky-finger-phalanx-proximal\",\n        \"pinky-finger-phalanx-intermediate\",\n        \"pinky-finger-phalanx-distal\",\n        \"pinky-finger-tip\"\n      ];\n      joints.forEach((jointName) => {\n        const bone = object.getObjectByName(jointName);\n        if (bone !== void 0) {\n          bone.jointName = jointName;\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`);\n        }\n        this.bones.push(bone);\n      });\n    });\n  }\n  updateMesh() {\n    const XRJoints = this.controller.joints;\n    let allInvisible = true;\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n          bone.position.copy(position);\n          bone.quaternion.copy(XRJoint.quaternion);\n          allInvisible = false;\n        }\n      }\n    }\n    if (allInvisible && this.scene) {\n      this.scene.visible = false;\n    } else if (this.scene) {\n      this.scene.visible = true;\n    }\n  }\n  dispose() {\n    if (this.scene) {\n      this.handModel.remove(this.scene);\n    }\n  }\n}\nexports.XRHandMeshModel = XRHandMeshModel;\n//# sourceMappingURL=XRHandMeshModel.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvWFJIYW5kTWVzaE1vZGVsLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLG1DQUFtQyxjQUFjLGFBQWEsMEJBQTBCLG1CQUFtQjtBQUMzRyxvQkFBb0IsbUJBQU8sQ0FBQyxpRUFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsV0FBVztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLHdDQUF3QyxXQUFXLEtBQUssWUFBWTtBQUNwRTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS94ci9kaXN0L1hSSGFuZE1lc2hNb2RlbC5janM/ZTE3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGV4cG9ydHMsIHsgX19lc01vZHVsZTogeyB2YWx1ZTogdHJ1ZSB9LCBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogXCJNb2R1bGVcIiB9IH0pO1xuY29uc3QgdGhyZWVTdGRsaWIgPSByZXF1aXJlKFwidGhyZWUtc3RkbGliXCIpO1xuY29uc3QgREVGQVVMVF9IQU5EX1BST0ZJTEVfUEFUSCA9IFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9Ad2VieHItaW5wdXQtcHJvZmlsZXMvYXNzZXRzQDEuMC9kaXN0L3Byb2ZpbGVzL2dlbmVyaWMtaGFuZC9cIjtcbmNsYXNzIFhSSGFuZE1lc2hNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKGhhbmRNb2RlbCwgY29udHJvbGxlciwgcGF0aCA9IERFRkFVTFRfSEFORF9QUk9GSUxFX1BBVEgsIGhhbmRlZG5lc3MsIGN1c3RvbU1vZGVsUGF0aCkge1xuICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gICAgdGhpcy5oYW5kTW9kZWwgPSBoYW5kTW9kZWw7XG4gICAgdGhpcy5ib25lcyA9IFtdO1xuICAgIGNvbnN0IGxvYWRlciA9IG5ldyB0aHJlZVN0ZGxpYi5HTFRGTG9hZGVyKCk7XG4gICAgaWYgKCFjdXN0b21Nb2RlbFBhdGgpXG4gICAgICBsb2FkZXIuc2V0UGF0aChwYXRoKTtcbiAgICBsb2FkZXIubG9hZChjdXN0b21Nb2RlbFBhdGggIT0gbnVsbCA/IGN1c3RvbU1vZGVsUGF0aCA6IGAke2hhbmRlZG5lc3N9LmdsYmAsIChnbHRmKSA9PiB7XG4gICAgICBjb25zdCBvYmplY3QgPSBnbHRmLnNjZW5lLmNoaWxkcmVuWzBdO1xuICAgICAgdGhpcy5oYW5kTW9kZWwuYWRkKG9iamVjdCk7XG4gICAgICB0aGlzLnNjZW5lID0gb2JqZWN0O1xuICAgICAgY29uc3QgbWVzaCA9IG9iamVjdC5nZXRPYmplY3RCeVByb3BlcnR5KFwidHlwZVwiLCBcIlNraW5uZWRNZXNoXCIpO1xuICAgICAgbWVzaC5mcnVzdHVtQ3VsbGVkID0gZmFsc2U7XG4gICAgICBtZXNoLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgICAgbWVzaC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcbiAgICAgIGNvbnN0IGpvaW50cyA9IFtcbiAgICAgICAgXCJ3cmlzdFwiLFxuICAgICAgICBcInRodW1iLW1ldGFjYXJwYWxcIixcbiAgICAgICAgXCJ0aHVtYi1waGFsYW54LXByb3hpbWFsXCIsXG4gICAgICAgIFwidGh1bWItcGhhbGFueC1kaXN0YWxcIixcbiAgICAgICAgXCJ0aHVtYi10aXBcIixcbiAgICAgICAgXCJpbmRleC1maW5nZXItbWV0YWNhcnBhbFwiLFxuICAgICAgICBcImluZGV4LWZpbmdlci1waGFsYW54LXByb3hpbWFsXCIsXG4gICAgICAgIFwiaW5kZXgtZmluZ2VyLXBoYWxhbngtaW50ZXJtZWRpYXRlXCIsXG4gICAgICAgIFwiaW5kZXgtZmluZ2VyLXBoYWxhbngtZGlzdGFsXCIsXG4gICAgICAgIFwiaW5kZXgtZmluZ2VyLXRpcFwiLFxuICAgICAgICBcIm1pZGRsZS1maW5nZXItbWV0YWNhcnBhbFwiLFxuICAgICAgICBcIm1pZGRsZS1maW5nZXItcGhhbGFueC1wcm94aW1hbFwiLFxuICAgICAgICBcIm1pZGRsZS1maW5nZXItcGhhbGFueC1pbnRlcm1lZGlhdGVcIixcbiAgICAgICAgXCJtaWRkbGUtZmluZ2VyLXBoYWxhbngtZGlzdGFsXCIsXG4gICAgICAgIFwibWlkZGxlLWZpbmdlci10aXBcIixcbiAgICAgICAgXCJyaW5nLWZpbmdlci1tZXRhY2FycGFsXCIsXG4gICAgICAgIFwicmluZy1maW5nZXItcGhhbGFueC1wcm94aW1hbFwiLFxuICAgICAgICBcInJpbmctZmluZ2VyLXBoYWxhbngtaW50ZXJtZWRpYXRlXCIsXG4gICAgICAgIFwicmluZy1maW5nZXItcGhhbGFueC1kaXN0YWxcIixcbiAgICAgICAgXCJyaW5nLWZpbmdlci10aXBcIixcbiAgICAgICAgXCJwaW5reS1maW5nZXItbWV0YWNhcnBhbFwiLFxuICAgICAgICBcInBpbmt5LWZpbmdlci1waGFsYW54LXByb3hpbWFsXCIsXG4gICAgICAgIFwicGlua3ktZmluZ2VyLXBoYWxhbngtaW50ZXJtZWRpYXRlXCIsXG4gICAgICAgIFwicGlua3ktZmluZ2VyLXBoYWxhbngtZGlzdGFsXCIsXG4gICAgICAgIFwicGlua3ktZmluZ2VyLXRpcFwiXG4gICAgICBdO1xuICAgICAgam9pbnRzLmZvckVhY2goKGpvaW50TmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBib25lID0gb2JqZWN0LmdldE9iamVjdEJ5TmFtZShqb2ludE5hbWUpO1xuICAgICAgICBpZiAoYm9uZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgYm9uZS5qb2ludE5hbWUgPSBqb2ludE5hbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGBDb3VsZG4ndCBmaW5kICR7am9pbnROYW1lfSBpbiAke2hhbmRlZG5lc3N9IGhhbmQgbWVzaGApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYm9uZXMucHVzaChib25lKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHVwZGF0ZU1lc2goKSB7XG4gICAgY29uc3QgWFJKb2ludHMgPSB0aGlzLmNvbnRyb2xsZXIuam9pbnRzO1xuICAgIGxldCBhbGxJbnZpc2libGUgPSB0cnVlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib25lcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYm9uZSA9IHRoaXMuYm9uZXNbaV07XG4gICAgICBpZiAoYm9uZSkge1xuICAgICAgICBjb25zdCBYUkpvaW50ID0gWFJKb2ludHNbYm9uZS5qb2ludE5hbWVdO1xuICAgICAgICBpZiAoWFJKb2ludC52aXNpYmxlKSB7XG4gICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBYUkpvaW50LnBvc2l0aW9uO1xuICAgICAgICAgIGJvbmUucG9zaXRpb24uY29weShwb3NpdGlvbik7XG4gICAgICAgICAgYm9uZS5xdWF0ZXJuaW9uLmNvcHkoWFJKb2ludC5xdWF0ZXJuaW9uKTtcbiAgICAgICAgICBhbGxJbnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWxsSW52aXNpYmxlICYmIHRoaXMuc2NlbmUpIHtcbiAgICAgIHRoaXMuc2NlbmUudmlzaWJsZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zY2VuZSkge1xuICAgICAgdGhpcy5zY2VuZS52aXNpYmxlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5zY2VuZSkge1xuICAgICAgdGhpcy5oYW5kTW9kZWwucmVtb3ZlKHRoaXMuc2NlbmUpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0cy5YUkhhbmRNZXNoTW9kZWwgPSBYUkhhbmRNZXNoTW9kZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1YUkhhbmRNZXNoTW9kZWwuY2pzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/XRHandMeshModel.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/context.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/context.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _interopNamespace(e) {\n  if (e && e.__esModule)\n    return e;\n  const n = Object.create(null, { [Symbol.toStringTag]: { value: \"Module\" } });\n  if (e) {\n    for (const k in e) {\n      if (k !== \"default\") {\n        const d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: () => e[k]\n        });\n      }\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nconst React__namespace = /* @__PURE__ */ _interopNamespace(React);\nconst XRContext = React__namespace.createContext(null);\nexports.XRContext = XRContext;\n//# sourceMappingURL=context.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvY29udGV4dC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixtQ0FBbUMsY0FBYyxhQUFhLDBCQUEwQixtQkFBbUI7QUFDM0csY0FBYyxtQkFBTyxDQUFDLHdHQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx3QkFBd0IsbUJBQW1CO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvY29udGV4dC5janM/OGI0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGV4cG9ydHMsIHsgX19lc01vZHVsZTogeyB2YWx1ZTogdHJ1ZSB9LCBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogXCJNb2R1bGVcIiB9IH0pO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5mdW5jdGlvbiBfaW50ZXJvcE5hbWVzcGFjZShlKSB7XG4gIGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICByZXR1cm4gZTtcbiAgY29uc3QgbiA9IE9iamVjdC5jcmVhdGUobnVsbCwgeyBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogXCJNb2R1bGVcIiB9IH0pO1xuICBpZiAoZSkge1xuICAgIGZvciAoY29uc3QgayBpbiBlKSB7XG4gICAgICBpZiAoayAhPT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgY29uc3QgZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgayk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBrLCBkLmdldCA/IGQgOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6ICgpID0+IGVba11cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG4uZGVmYXVsdCA9IGU7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKG4pO1xufVxuY29uc3QgUmVhY3RfX25hbWVzcGFjZSA9IC8qIEBfX1BVUkVfXyAqLyBfaW50ZXJvcE5hbWVzcGFjZShSZWFjdCk7XG5jb25zdCBYUkNvbnRleHQgPSBSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnRzLlhSQ29udGV4dCA9IFhSQ29udGV4dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQuY2pzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/context.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/index.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/index.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst Controllers = __webpack_require__(/*! ./Controllers.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/Controllers.cjs\");\nconst Hands = __webpack_require__(/*! ./Hands.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/Hands.cjs\");\nconst Interactions = __webpack_require__(/*! ./Interactions.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/Interactions.cjs\");\nconst XR = __webpack_require__(/*! ./XR.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XR.cjs\");\nconst XRController = __webpack_require__(/*! ./XRController.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XRController.cjs\");\nconst XREvents = __webpack_require__(/*! ./XREvents.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XREvents.cjs\");\nconst XRControllerModelFactory = __webpack_require__(/*! ./XRControllerModelFactory.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/XRControllerModelFactory.cjs\");\nconst Teleportation = __webpack_require__(/*! ./Teleportation.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/Teleportation.cjs\");\n__webpack_require__(/*! ./context.cjs */ \"(ssr)/./node_modules/@react-three/xr/dist/context.cjs\");\nexports.Controllers = Controllers.Controllers;\nexports.Ray = Controllers.Ray;\nexports.Hands = Hands.Hands;\nexports.InteractionManager = Interactions.InteractionManager;\nexports.Interactive = Interactions.Interactive;\nexports.RayGrab = Interactions.RayGrab;\nexports.useHitTest = Interactions.useHitTest;\nexports.useInteraction = Interactions.useInteraction;\nexports.ARButton = XR.ARButton;\nexports.VRButton = XR.VRButton;\nexports.XR = XR.XR;\nexports.XRButton = XR.XRButton;\nexports.startSession = XR.startSession;\nexports.stopSession = XR.stopSession;\nexports.toggleSession = XR.toggleSession;\nexports.useController = XR.useController;\nexports.useXR = XR.useXR;\nexports.XRController = XRController.XRController;\nexports.useXREvent = XREvents.useXREvent;\nexports.XRControllerModelFactory = XRControllerModelFactory.XRControllerModelFactory;\nexports.TeleportationPlane = Teleportation.TeleportationPlane;\nexports.useTeleportation = Teleportation.useTeleportation;\n//# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsbUNBQW1DLGNBQWMsYUFBYSwwQkFBMEIsbUJBQW1CO0FBQzNHLG9CQUFvQixtQkFBTyxDQUFDLG9GQUFtQjtBQUMvQyxjQUFjLG1CQUFPLENBQUMsd0VBQWE7QUFDbkMscUJBQXFCLG1CQUFPLENBQUMsc0ZBQW9CO0FBQ2pELFdBQVcsbUJBQU8sQ0FBQyxrRUFBVTtBQUM3QixxQkFBcUIsbUJBQU8sQ0FBQyxzRkFBb0I7QUFDakQsaUJBQWlCLG1CQUFPLENBQUMsOEVBQWdCO0FBQ3pDLGlDQUFpQyxtQkFBTyxDQUFDLDhHQUFnQztBQUN6RSxzQkFBc0IsbUJBQU8sQ0FBQyx3RkFBcUI7QUFDbkQsbUJBQU8sQ0FBQyw0RUFBZTtBQUN2QixtQkFBbUI7QUFDbkIsV0FBVztBQUNYLGFBQWE7QUFDYiwwQkFBMEI7QUFDMUIsbUJBQW1CO0FBQ25CLGVBQWU7QUFDZixrQkFBa0I7QUFDbEIsc0JBQXNCO0FBQ3RCLGdCQUFnQjtBQUNoQixnQkFBZ0I7QUFDaEIsVUFBVTtBQUNWLGdCQUFnQjtBQUNoQixvQkFBb0I7QUFDcEIsbUJBQW1CO0FBQ25CLHFCQUFxQjtBQUNyQixxQkFBcUI7QUFDckIsYUFBYTtBQUNiLG9CQUFvQjtBQUNwQixrQkFBa0I7QUFDbEIsZ0NBQWdDO0FBQ2hDLDBCQUEwQjtBQUMxQix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvaW5kZXguY2pzP2ZiMzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCB7IF9fZXNNb2R1bGU6IHsgdmFsdWU6IHRydWUgfSwgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiTW9kdWxlXCIgfSB9KTtcbmNvbnN0IENvbnRyb2xsZXJzID0gcmVxdWlyZShcIi4vQ29udHJvbGxlcnMuY2pzXCIpO1xuY29uc3QgSGFuZHMgPSByZXF1aXJlKFwiLi9IYW5kcy5janNcIik7XG5jb25zdCBJbnRlcmFjdGlvbnMgPSByZXF1aXJlKFwiLi9JbnRlcmFjdGlvbnMuY2pzXCIpO1xuY29uc3QgWFIgPSByZXF1aXJlKFwiLi9YUi5janNcIik7XG5jb25zdCBYUkNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi9YUkNvbnRyb2xsZXIuY2pzXCIpO1xuY29uc3QgWFJFdmVudHMgPSByZXF1aXJlKFwiLi9YUkV2ZW50cy5janNcIik7XG5jb25zdCBYUkNvbnRyb2xsZXJNb2RlbEZhY3RvcnkgPSByZXF1aXJlKFwiLi9YUkNvbnRyb2xsZXJNb2RlbEZhY3RvcnkuY2pzXCIpO1xuY29uc3QgVGVsZXBvcnRhdGlvbiA9IHJlcXVpcmUoXCIuL1RlbGVwb3J0YXRpb24uY2pzXCIpO1xucmVxdWlyZShcIi4vY29udGV4dC5janNcIik7XG5leHBvcnRzLkNvbnRyb2xsZXJzID0gQ29udHJvbGxlcnMuQ29udHJvbGxlcnM7XG5leHBvcnRzLlJheSA9IENvbnRyb2xsZXJzLlJheTtcbmV4cG9ydHMuSGFuZHMgPSBIYW5kcy5IYW5kcztcbmV4cG9ydHMuSW50ZXJhY3Rpb25NYW5hZ2VyID0gSW50ZXJhY3Rpb25zLkludGVyYWN0aW9uTWFuYWdlcjtcbmV4cG9ydHMuSW50ZXJhY3RpdmUgPSBJbnRlcmFjdGlvbnMuSW50ZXJhY3RpdmU7XG5leHBvcnRzLlJheUdyYWIgPSBJbnRlcmFjdGlvbnMuUmF5R3JhYjtcbmV4cG9ydHMudXNlSGl0VGVzdCA9IEludGVyYWN0aW9ucy51c2VIaXRUZXN0O1xuZXhwb3J0cy51c2VJbnRlcmFjdGlvbiA9IEludGVyYWN0aW9ucy51c2VJbnRlcmFjdGlvbjtcbmV4cG9ydHMuQVJCdXR0b24gPSBYUi5BUkJ1dHRvbjtcbmV4cG9ydHMuVlJCdXR0b24gPSBYUi5WUkJ1dHRvbjtcbmV4cG9ydHMuWFIgPSBYUi5YUjtcbmV4cG9ydHMuWFJCdXR0b24gPSBYUi5YUkJ1dHRvbjtcbmV4cG9ydHMuc3RhcnRTZXNzaW9uID0gWFIuc3RhcnRTZXNzaW9uO1xuZXhwb3J0cy5zdG9wU2Vzc2lvbiA9IFhSLnN0b3BTZXNzaW9uO1xuZXhwb3J0cy50b2dnbGVTZXNzaW9uID0gWFIudG9nZ2xlU2Vzc2lvbjtcbmV4cG9ydHMudXNlQ29udHJvbGxlciA9IFhSLnVzZUNvbnRyb2xsZXI7XG5leHBvcnRzLnVzZVhSID0gWFIudXNlWFI7XG5leHBvcnRzLlhSQ29udHJvbGxlciA9IFhSQ29udHJvbGxlci5YUkNvbnRyb2xsZXI7XG5leHBvcnRzLnVzZVhSRXZlbnQgPSBYUkV2ZW50cy51c2VYUkV2ZW50O1xuZXhwb3J0cy5YUkNvbnRyb2xsZXJNb2RlbEZhY3RvcnkgPSBYUkNvbnRyb2xsZXJNb2RlbEZhY3RvcnkuWFJDb250cm9sbGVyTW9kZWxGYWN0b3J5O1xuZXhwb3J0cy5UZWxlcG9ydGF0aW9uUGxhbmUgPSBUZWxlcG9ydGF0aW9uLlRlbGVwb3J0YXRpb25QbGFuZTtcbmV4cG9ydHMudXNlVGVsZXBvcnRhdGlvbiA9IFRlbGVwb3J0YXRpb24udXNlVGVsZXBvcnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmNqcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/xr/dist/utils.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/@react-three/xr/dist/utils.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a, _b;\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _interopNamespace(e) {\n  if (e && e.__esModule)\n    return e;\n  const n = Object.create(null, { [Symbol.toStringTag]: { value: \"Module\" } });\n  if (e) {\n    for (const k in e) {\n      if (k !== \"default\") {\n        const d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: () => e[k]\n        });\n      }\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nconst React__namespace = /* @__PURE__ */ _interopNamespace(React);\nconst uniq = (arr) => Array.from(new Set(arr));\nconst useIsomorphicLayoutEffect = typeof window !== \"undefined\" && (((_a = window.document) == null ? void 0 : _a.createElement) || ((_b = window.navigator) == null ? void 0 : _b.product) === \"ReactNative\") ? React__namespace.useLayoutEffect : React__namespace.useEffect;\nfunction useCallbackRef(fn) {\n  const ref = React__namespace.useRef(fn);\n  useIsomorphicLayoutEffect(() => void (ref.current = fn), [fn]);\n  return ref;\n}\nexports.uniq = uniq;\nexports.useCallbackRef = useCallbackRef;\nexports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;\n//# sourceMappingURL=utils.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL3hyL2Rpc3QvdXRpbHMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxtQ0FBbUMsY0FBYyxhQUFhLDBCQUEwQixtQkFBbUI7QUFDM0csY0FBYyxtQkFBTyxDQUFDLHdHQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx3QkFBd0IsbUJBQW1CO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osc0JBQXNCO0FBQ3RCLGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AcmVhY3QtdGhyZWUveHIvZGlzdC91dGlscy5janM/ZjA4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfYSwgX2I7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhleHBvcnRzLCB7IF9fZXNNb2R1bGU6IHsgdmFsdWU6IHRydWUgfSwgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiTW9kdWxlXCIgfSB9KTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuZnVuY3Rpb24gX2ludGVyb3BOYW1lc3BhY2UoZSkge1xuICBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgcmV0dXJuIGU7XG4gIGNvbnN0IG4gPSBPYmplY3QuY3JlYXRlKG51bGwsIHsgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiTW9kdWxlXCIgfSB9KTtcbiAgaWYgKGUpIHtcbiAgICBmb3IgKGNvbnN0IGsgaW4gZSkge1xuICAgICAgaWYgKGsgIT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIGNvbnN0IGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIGspO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgaywgZC5nZXQgPyBkIDoge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiAoKSA9PiBlW2tdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBuLmRlZmF1bHQgPSBlO1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuKTtcbn1cbmNvbnN0IFJlYWN0X19uYW1lc3BhY2UgPSAvKiBAX19QVVJFX18gKi8gX2ludGVyb3BOYW1lc3BhY2UoUmVhY3QpO1xuY29uc3QgdW5pcSA9IChhcnIpID0+IEFycmF5LmZyb20obmV3IFNldChhcnIpKTtcbmNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmICgoKF9hID0gd2luZG93LmRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2EuY3JlYXRlRWxlbWVudCkgfHwgKChfYiA9IHdpbmRvdy5uYXZpZ2F0b3IpID09IG51bGwgPyB2b2lkIDAgOiBfYi5wcm9kdWN0KSA9PT0gXCJSZWFjdE5hdGl2ZVwiKSA/IFJlYWN0X19uYW1lc3BhY2UudXNlTGF5b3V0RWZmZWN0IDogUmVhY3RfX25hbWVzcGFjZS51c2VFZmZlY3Q7XG5mdW5jdGlvbiB1c2VDYWxsYmFja1JlZihmbikge1xuICBjb25zdCByZWYgPSBSZWFjdF9fbmFtZXNwYWNlLnVzZVJlZihmbik7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4gdm9pZCAocmVmLmN1cnJlbnQgPSBmbiksIFtmbl0pO1xuICByZXR1cm4gcmVmO1xufVxuZXhwb3J0cy51bmlxID0gdW5pcTtcbmV4cG9ydHMudXNlQ2FsbGJhY2tSZWYgPSB1c2VDYWxsYmFja1JlZjtcbmV4cG9ydHMudXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5janMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/xr/dist/utils.cjs\n");

/***/ })

};
;